<UserControl x:Class="WpfApp.BindingBase"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:WpfApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <ResourceDictionary>
            <XmlDataProvider x:Key="xmldp" XPath="FileSystem/Folder">
                <x:XData>
                    <FileSystem xmlns="">
                        <Folder Name="Books">
                            <Folder Name="Programming">
                                <Folder Name="Windows">
                                    <Folder Name="WPF"/>
                                    <Folder Name="MFC"/>
                                    <Folder Name="Qt"/>
                                </Folder>
                            </Folder>
                            <Folder Name="Tools" >
                                <Folder Name="Development"/>
                                <Folder Name="Designment"/>
                                <Folder Name="Players"/>
                            </Folder>
                        </Folder>
                    </FileSystem>
                </x:XData>
            </XmlDataProvider>
        </ResourceDictionary>
    </UserControl.Resources>
    <TabControl TabStripPlacement="Bottom">
        <TabItem>
            <TabItem.Header>
                <Label Content="Binding原理"/>
            </TabItem.Header>
            <UniformGrid Columns="2">
                <UniformGrid Rows="2">
                    <TextBlock TextWrapping="WrapWithOverflow">
                    绑定的基础是DataContext依赖属性，UI元素树上的元素可以获取父类DataContext属性
                    但是控件元素是不知道怎么使用DataContext的，因此需要指明将Datacontext用于控件元素
                    的什么属性
                    </TextBlock>
                    <TextBlock TextWrapping="WrapWithOverflow">
                    绑定类似于两个元素之间的通信，什么源对象的什么属性，修改什么目标的什么参数，
                    在这个发送的过程中可以添加数据校验、进行传输数据的转换
                    </TextBlock>
                </UniformGrid>
                <UniformGrid Rows="2">
                    <DockPanel LastChildFill="True">
                        <TextBlock TextWrapping="WrapWithOverflow" DockPanel.Dock="Top">
                            listBox控件的itemsource属性可以自动包装数据,
                        </TextBlock>
                        <ListBox Name="ls_auto"/>
                    </DockPanel>
                    <DockPanel LastChildFill="True">
                        <TextBlock TextWrapping="WrapWithOverflow" DockPanel.Dock="Top">
                            TextBox控件的没有自动包装属性,
                        </TextBlock>
                        <TextBox Name="txt_auto" BorderBrush="Red" Text="{Binding Path=DataContext,RelativeSource={ RelativeSource Mode=Self} }" />
                    </DockPanel>
                </UniformGrid>
            </UniformGrid>
        </TabItem>
        <TabItem>
            <TabItem.Header>
                <Label Content="代码Binding"/>
            </TabItem.Header>
            <UniformGrid Columns="2">
                <TextBox Name="txt_box"  Margin="5" TextWrapping="WrapWithOverflow" BorderBrush="Black" />
                <Button  Name="btn_test" Margin="5" Content="button" />
            </UniformGrid>
        </TabItem>
        <TabItem Header="控件间绑定">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="7*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="7*"/>
                </Grid.ColumnDefinitions>
                <Label Grid.Row="0" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Content="输入数据:"/>
                <Label Grid.Row="1" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Content="字体大小:"/>
                <Label Grid.Row="2" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Content="字体大小:"/>
                <TextBox Grid.Row="0" Grid.Column="1" VerticalContentAlignment="Center" x:Name="txt_input" Text="123456789"/>
                <Label   Grid.Row="1" Grid.Column="1" VerticalContentAlignment="Center" Content="{Binding ElementName=txt_input, Path=Text.Length}" FontSize="{Binding ElementName=txt_input, Path=FontSize}"/>
                <Slider  Grid.Row="2" Grid.Column="1" VerticalContentAlignment="Center" Value="{Binding ElementName=txt_input, Path=FontSize, Mode=TwoWay}" Minimum="10" Maximum="50" />
            </Grid>
        </TabItem>
        <TabItem Header="DataContext">
            <UniformGrid Columns="2">
                <TextBox TextWrapping="WrapWithOverflow">
                    DataContext属性定义在FrameworkElement中，这个类是控件的基类,wpf的ui布局是树形结构，
                    所以在ui元素树的每个节点都有DataContext属性，所以在只知道path而不知道source时会
                    自动沿着ui元素树向上搜索DataContext寻找是否有符合要求的绑定对象。
                </TextBox>
                <UniformGrid Rows="4">
                    <Grid DataContext="没有path也没有source的Binding">
                        <TextBlock Text="{Binding}"/>
                    </Grid>
                    <StackPanel Orientation="Vertical">
                        <StackPanel.DataContext>
                            <local:Student Name="李四" Age="10" ID="23"/>
                        </StackPanel.DataContext>
                        <TextBlock Text="{Binding Name}"/>
                        <TextBlock Text="{Binding Age}"/>
                        <TextBlock Text="{Binding ID}"/>
                    </StackPanel>
                    <Grid DataContext="Grid_DataContext">
                        <Grid>
                            <Grid>
                                <Grid>
                                    <Button Name="btn_context" Content="button" Height="45" Width="90" Click="Btn_context_Click" />
                                </Grid>
                            </Grid>
                        </Grid>
                    </Grid>
                </UniformGrid>
            </UniformGrid>
        </TabItem>
        <TabItem Header="ListBox">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Label   Grid.Row="0" Content="Student ID:"/>
                <TextBox Grid.Row="1" Name="txt_box_id"/>
                <Label   Grid.Row="2" Content="Student List:"/>
                <UniformGrid Grid.Row="3" Columns="2">
                    <ListBox Name="ls_box_list"/>
                    <ListBox Name="ls_box_full">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Width="30" Text="{Binding Path=ID}"/>
                                    <TextBlock Width="60" Text="{Binding Path=Name}"/>
                                    <TextBlock Width="30" Text="{Binding Path=Age}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </UniformGrid>
            </Grid>
        </TabItem>
        <TabItem Header="ListView">
            <ListView Name="ls_view_full">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="ID"   Width="60" DisplayMemberBinding="{Binding ID}" />
                        <GridViewColumn Header="Name" Width="60" DisplayMemberBinding="{Binding Name}" />
                        <GridViewColumn Header="Age"  Width="60" DisplayMemberBinding="{Binding Age}" />
                    </GridView>
                </ListView.View>
            </ListView>
        </TabItem>
        <TabItem Header="XML绑定">
            <UniformGrid Columns="2">
                <ListView Name="ls_view_xml">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="ID" Width="80" DisplayMemberBinding="{Binding XPath=@ID}"/>
                            <GridViewColumn Header="Name" Width="80" DisplayMemberBinding="{Binding XPath=Name}"/>
                        </GridView>
                    </ListView.View>
                </ListView>
                <TreeView ItemsSource="{Binding Source={StaticResource xmldp}}" >
                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding XPath=Folder}">
                            <TextBlock Text="{Binding XPath=@Name}"/>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                </TreeView>

            </UniformGrid>
        </TabItem>
        <TabItem Header="Linq绑定">
            <UniformGrid Columns="2">
                <UniformGrid Rows="2">
                    <TextBox TextWrapping="WrapWithOverflow" BorderBrush="Black" >
                        Ling查询的结果是一个IEnumerable《T》类型对象，所以它可以作为列表控件的ItemSource来使用
                    </TextBox>
                    <ListView Name="ls_linq">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Width="60" Header="ID"   DisplayMemberBinding="{Binding ID}"/>
                                <GridViewColumn Width="60" Header="Name" DisplayMemberBinding="{Binding Name}"/>
                                <GridViewColumn Width="60" Header="Age"  DisplayMemberBinding="{Binding Age}"/>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </UniformGrid>
                <UniformGrid Rows="2">
                    <Button Content="ListLinqSearch" Name="btn_list_linq" Width="90" Height="45" Margin="3" />
                    <Button Content="XmlLinqSearch"  Name="btn_xml_linq" Width="90" Height="45" Margin="3" />
                </UniformGrid>
            </UniformGrid>
        </TabItem>
    </TabControl>
</UserControl>
