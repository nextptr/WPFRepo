<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cti.Hardware.ScanDevice</name>
    </assembly>
    <members>
        <member name="M:Cti.Hardware.ScanDevice.ApiLicense.Dummy">
            <summary>
            Do not remove this method. InjectModuleConstructor corrupts this class without this.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ArcShape">
            <summary>
            Represents an Arc which can be marked using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ArcShape.#ctor">
            <summary>
            Initialize a new instance of ArcShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ArcShape.CenterPoint">
            <summary>
            Gets or sets the Center point of the ArcShape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ArcShape.SweepAngle">
            <summary>
            Gets or sets the sweep angle in radians
            If this is positive arc is counter clockwise or else it is clockwise
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ArcShape.Radius">
            <summary>
            Gets or sets the Radius
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ArcShape.StartAngle">
            <summary>
            Gets or sets the starting angle in radians. 
            <para>This angle is relative to axis angle direction and measured in counter clockwise direction.</para>
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.CircleShape">
            <summary>
            Represents an Circle which can be marked using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.CircleShape.#ctor">
            <summary>
            Initialize a new instance of ArcShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CircleShape.CenterPoint">
            <summary>
            Gets or sets the Center point of the ArcShape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CircleShape.Clockwise">
            <summary>
            Gets or sets the Clockwise
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CircleShape.Radius">
            <summary>
            Gets or sets the Radius
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CircleShape.StartAngle">
            <summary>
            Gets or sets the starting angle in radians. 
            <para>This angle is relative to axis angle direction and measured in counter clockwise direction.</para>
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.CycleTimeInfo">
            <summary>
            Used to encapsulate properties of cycle time.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.CycleTimeInfo.#ctor">
            <summary>
             Initialize a new instance of cycle time info
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CycleTimeInfo.MarkTime">
            <summary>
            Gets or sets the mark time.
            </summary>
            <value>
            The mark time.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CycleTimeInfo.JumpTime">
            <summary>
            Gets or sets the jump time.
            </summary>
            <value>
            The jump time.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CycleTimeInfo.DelayTime">
            <summary>
            Gets or sets the delay time.
            </summary>
            <value>
            The delay time.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.CycleTimeInfo.TotalTime">
            <summary>
            Gets the total job execution time.
            </summary>
            <value>
            The total time.
            </value>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape">
            <summary>
            Used to encapsulate properties of a data matrix barcode shape. This is used by <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> to scan a data matrix barcode using the scan device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.#ctor">
            <summary>
             Initialize a new instance of data matrix barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.Location">
            <summary>
            Gets or sets the location of the data matrix barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.DataMatrixSize">
            <summary>
            Gets or sets the data matrix barcode size.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.Height">
            <summary>
            Gets or sets the height of the data matrix barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.Text">
            <summary>
            Gets or sets the text of the data matrix barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of the data matrix barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.Angle">
            <summary>
            Gets or sets the rotation angle of the data matrix barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.InvertImage">
            <summary>
            Gets or sets a value indicating whether the data matrix barcode shape is inverted.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.QuietZone">
            <summary>
            Gets or sets the existence of quiet zone for the data matrix barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.DataMatrixFormat">
            <summary>
            Gets or sets the format of the data matrix barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.AutoExpand">
            <summary>
            Gets or sets the value indicating whether the size of data matrix barcode shape can be auto expanded.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.FlipHorizontally">
            <summary>
            Gets or sets the value indicating whether the data matrix barcode shape is flipped in horizontal direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.FlipVertically">
            <summary>
            Gets or sets the value indicating whether the data matrix barcode shape is flipped in vertical direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DataMatrixBarcodeShape.MarkingOrder">
            <summary>
            Gets or sets the order of the marking of the data matrix barcode shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.Degree3BezierShape">
            <summary>
            Represents a degree 3 bezier path which can be marked using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Degree3BezierShape.#ctor">
            <summary>
            Initialize a new instance of ArcShape
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Degree3BezierShape.AddControlPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Add point to controlPointList
            </summary>
            <param name="controlPoint"></param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Degree3BezierShape.Closed">
            <summary>
            Gets or sets the Closed
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DrillShape">
            <summary>
            DrillShape supports scanning a series of dots.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.#ctor">
            <summary>
            Initialize a new instance of DrillShape. SetPattern() should be called immediately after calling this constructor.
            This constructor is supposed to be used in COM.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.SetPattern(Cti.Hardware.ScanDevice.Base.JumpAndFireDrillShapePattern)">
            <summary>
            If the default constructor is called, SetPattern should be called before adding points.
            This constructor is supposed to be used in COM only.
            </summary>
            <param name="pattern">Jump and fire pattern</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.SetPattern(Cti.Hardware.ScanDevice.Base.ControlledDrillPattern)">
            <summary>
            If the default constructor is called, SetPattern should be called before adding points.
            This constructor is supposed to be used in COM only.
            </summary>
            <param name="pattern">Controlled drill pattern</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.AddJumpAndFirePoint(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single)">
            <summary>
            Add point as a jump and fire point
            On the first call to this function, extract the x,y and z coordinates from the point.
            Thereafter, call to the AddJumpAndFirePoint overloaded mehtod.
            </summary>
            <param name="point">Dot location</param>
            <param name="powerPercentage">Power of the dot has a percentage of maximum power.</param>
            <param name="settlingTime">Settling time in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.AddJumpAndFirePoint(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Add point as a jump and fire point
            On the first call to this function, validate the power percentage.
            Thereafter, create a drill point and add it into the DrillPoints.
            </summary>
            <param name="x">X coordinate of dot location</param>
            <param name="y">Y coordinate of dot location</param>
            <param name="z">Z coordinate of dot location</param>
            <param name="powerPercentage">Power of the dot has a percentage of maximum power.</param>
            <param name="settlingTime">Settling time in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.AddPointAndShootPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Add point as a point and shoot point
            On the first call to this function, extract the x,y and z coordinates from the point.
            Thereafter, call to the AddPointAndShootPoint overloaded mehtod.
            </summary>
            <param name="point">Dot location</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.AddPointAndShootPoint(System.Single,System.Single,System.Single)">
            <summary>
            Add point as a point and shoot point
            On the first call to this function, create a drill point and add it into the DrillPoints.
            </summary>
            <param name="x">X coordinate of dot location</param>
            <param name="y">Y coordinate of dot location</param>
            <param name="z">Z coordinate of dot location</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.AddCirclePoint(Cti.Hardware.ScanDevice.Base.Point3D,System.Single)">
            <summary>
            Add point as a circle point
            On the first call to this function, extract the x,y,z coordinates from the point and radius.
            Thereafter, call to the AddCirclePoint overloaded mehtod.
            </summary>
            <param name="point">Dot location</param>
            <param name="radius">Circle radius</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DrillShape.AddCirclePoint(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Add point as a circle point
            On the first call to this function, create a drill point and add it into the DrillPoints.
            </summary>
            <param name="x">X coordinate of dot location</param>
            <param name="y">Y coordinate of dot location</param>
            <param name="z">Z coordinate of dot location</param>
            <param name="radius">Circle radius</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DrillShape.MarkingMode">
            <summary>
            Gets the marking mode of the DrillShape. This is read only property. This gets set automatically when 
            either AddJumpAndFireDot or AddNormalDot called.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DynamicArcTextShape">
            <summary>
            Represents a dynamic arc text which can be marked using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DynamicArcTextShape.#ctor">
            <summary>
            Initialize a new instance of DynamicArcTextShape
            this is basically a ArcTextShape where user can change some properties dynamically
            such as text, Center point, height etc..
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DynamicArcTextShape.SetLineHatchPattern(System.Single,System.Single,Cti.Hardware.ScanDevice.Base.HatchLineStyle)">
            <summary>
            Sets the line hatch pattern of the DynamicArcTextShape
            </summary>
            <param name="lineSpace">The line space.</param>
            <param name="angle">The angle.</param>
            <param name="style">The line hatch style.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">lineSpace;Line Space should be greater than zero</exception>
            <exception cref="T:System.NotSupportedException">Serpentine hatch patterns not supported for dynamic shapes</exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.Center">
            <summary>
            Gets or sets the center of the Arc that the dynamic arc text lies on
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.Radius">
            <summary>
            Gets or sets the radius of the arc which is used to construct the DynamicArcTextShape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.Clockwise">
            <summary>
            Gets or sets the property indicating whether the text is scanned in clockwise direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.StartAngle">
            <summary>
            Gets or sets the angle in which the text is located, measured in radians from the positive-x direction
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.Align">
            <summary>
            Gets or sets the alignment of the text with respect to its arc
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.CharacterGap">
            <summary>
            Gets or sets the charactor gap of the text
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.FontName">
            <summary>
            Gets or sets the name of the font which is used to draw the text. 
            Provide Font face name if True Type or file name without folder or drive names if .ovf
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.EvaluateVariableTags">
            <summary>
            Gets or sets the value indicating whether the variables withing the texts is processed as variables.
            Set this property to false will discard the valiables withing the text and scanns the text as it is 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.Text">
            <summary>
            Gets or sets the text of the DynamicArcTextShape 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.VariableName">
            <summary>
            Gets or set the variable name of the DynamicArcTextShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.Height">
            <summary>
            Gets or sets the height of the DynamicArcTextShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.Elevation">
            <summary>
            Gets or sets the elevation of the DynamicArcTextShape
            </summary>
            <value>
            The elevation.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.DotDurationInMicroseconds">
            <summary>
            Gets or sets the dot duration of the DynamicArcTextShape in microseconds.
            </summary>
            <value>
            The dot duration in microseconds.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.MarkingOrder">
            <summary>
            Gets or sets the value indicating the output of hatching and the order.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicArcTextShape.HatchPattern">
            <summary>
            Gets or sets the Hatch pattern associated with text
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.EllipseShape">
            <summary>
            Represents an ellipse which can be marked using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.EllipseShape.#ctor">
            <summary>
            Initialize a new instance of ArcShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.EllipseShape.CenterPoint">
            <summary>
            Gets or sets the Center point of the ArcShape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.EllipseShape.MajorAxisAngle">
            <summary>
            Gets or sets the angle of the major axis. Measure reletive to x axis direction in counter clockwise direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.EllipseShape.MajorLength">
            <summary>
            Gets or sets the length of the major axis.
            That is the distance between cnter and the end point of the larger axis
            <para>But in some cases, it may be representing the smaller length axis 
            and the RatioMinorMajor will be larger than 1</para>
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.EllipseShape.RatioMinorMajor">
            <summary>
            Gets or sets the ratio of minor axis length/major axis length
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.EllipseShape.Clockwise">
            <summary>
            Gets or sets the Clockwise
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.EllipseShape.StartAngle">
            <summary>
            Gets or sets the starting angle in radians. 
            <para>This angle is relative to axis angle direction and measured in counter clockwise direction.</para>
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException">
            <summary>
            CorrectionFileUploadFailedException is thrown when error occured when uploading a correction file to the device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException.#ctor">
            <summary>
            Initializes a new instance of CorrectionFileUploadFailedException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of CorrectionFileUploadFailedException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of CorrectionFileUploadFailedException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceClassNotFoundException">
            <summary>
            DeviceClassNotFoundException is thrown when device class is not found
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceClassNotFoundException.#ctor">
            <summary>
            Initializes a new instance of DeviceClassNotFoundException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceClassNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DeviceClassNotFoundException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceClassNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceClassNotFoundException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceClassNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceClassNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.OfflineServicesNotSupportedException">
            <summary>
            DeviceClassNotFoundException is thrown when the offline service is not supported
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.OfflineServicesNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of OfflineServicesNotSupportedException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.OfflineServicesNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of OfflineServicesNotSupportedException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.OfflineServicesNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of OfflineServicesNotSupportedException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.OfflineServicesNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.OfflineServicesNotSupportedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException">
            <summary>
            Description of StoredDocumentDataIncompatibleException.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException.#ctor">
            <summary>
            Initializes a new instance of StoredDocumentDataIncompatibleException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of StoredDocumentDataIncompatibleException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of StoredDocumentDataIncompatibleException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException">
            <summary>
            Description of StoredJobOperationFailedExceptioncs.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException.#ctor">
            <summary>
            Initializes a new instance of StoredScanDocumentOperationFailedException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of StoredScanDocumentOperationFailedException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of StoredScanDocumentOperationFailedException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.VectorBase.scanCommandSets">
            <summary>
            Each ScanCommandSet carries a set of ScanCommands which are having same laser parameters
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddDot(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a Dot to the VectorImage
            </summary>
            <param name="x">The x coordinate of the Dot</param>
            <param name="y">The y coordinate of the Dot</param>
            <param name="z">The z coordinate of the Dot</param>
            <param name="durationOfStay">Time Duration (Micro seconds)which the scan head positioned on the Dot</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line to the VectorImage
            </summary>
            <param name="startX">The x coordinate of the starting point of the Line</param>
            <param name="startY">The y coordinate of the starting point of the Line</param>
            <param name="startZ">The z coordinate of the starting point of the Line</param>
            <param name="endX">The x coordinate of the end point of the Line</param>
            <param name="endY">The y coordinate of the end point of the Line</param>
            <param name="endZ">The z coordinate of the end point of the Line</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddCircle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a circle to the VectorImage
            </summary>
            <param name="centerX">The x coordinate of the center of the circle</param>
            <param name="centerY">The y coordinate of the center of the circle</param>
            <param name="centerZ">The z coordinate of the center of the circle</param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddCircle(Cti.Hardware.ScanDevice.CircleShape)">
            <summary>
            Add an CircleShape to the VectorImage
            </summary>
            <param name="circleShape"></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Add an Arc to the VectorImage
            </summary>
            <param name="centerX">The x coordinate of the center</param>
            <param name="centerY">The y coordinate of the center</param>
            <param name="centerZ">The z coordinate of the center</param>
            <param name="radius">The radius of the arc</param>
            <param name="startAngle">The StartAngle(measured in radian) of the arc</param>
            <param name="sweepAngle">The Sweep angle(measured in radian) of the arc, If this is positive arc is CCW if negative arc is CW </param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddArc(Cti.Hardware.ScanDevice.ArcShape)">
            <summary>
            Add an ArcShape to the VectorImage
            </summary>
            <param name="arcShape"></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddEllipse(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a Ellipse to the VectorImage
            </summary>
            <param name="centerX">The x coordinate of the center </param>
            <param name="centerY">The y coordinate of the center</param>
            <param name="centerZ">The z coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis of the ellipse</param>
            <param name="majorAxisAngle"> The majorAxis angle(measured in radian)  of the ellipse </param>
            <param name="ratioMinorMajor">The ratio of minor axis to major axis of the ellipse</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddEllipse(Cti.Hardware.ScanDevice.EllipseShape)">
            <summary>
            Add an EllipseShape to the VectorImage
            </summary>
            <param name="ellipseShape"></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddEllipticalArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a Elliptical Arc to the VectorImage
            </summary>
            <param name="centerX">The x coordinate of the center</param>
            <param name="centerY">The y coordinate of the center</param>
            <param name="centerZ">The z coordinate of the center</param>
            <param name="majorAxisLength">The length of the major axis</param>
            <param name="majorAxisAngle">Angle(measured in radian)  of the Major axis, relative to x direction CCW</param>
            <param name="ratioMinorMajor">Ratio, major axis length to minor axis length</param>
            <param name="startAngle"> This angle(measured in radian)  is relative to the axis angle direction and measured CCW.</param>
            <param name="sweepAngle">Sweep Angle(measured in radian)  of the Arc.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddEllipticalArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a Elliptical Arc to the VectorImage
            </summary>
            <param name="centerX">The x coordinate of the center</param>
            <param name="centerY">The y coordinate of the center</param>
            <param name="centerZ">The z coordinate of the center</param>
            <param name="majorAxisLength">The length of the major axis</param>
            <param name="majorAxisAngle">Angle(measured in radian) of the Major axis, relative to x direction CCW</param>
            <param name="ratioMinorMajor">Ratio, major axis length to minor axis length</param>
            <param name="startAngle"> This angle(measured in radian) is relative to the axis angle direction and measured CCW</param>
            <param name="sweepAngle">Sweep Angle(measured in radian) of the Arc</param>
            <param name="maxSegmentationError">maximum allowed error for segmenting</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddRectangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a Rectangle to the VectorImage
            </summary>
            <param name="x">The x coordinate of the reference point of the rectangle</param>
            <param name="y">The y coordinate of the reference point of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <param name="angle">The angle(measured in radian) of rotation relative to X+direction in CCW with respect to reference point.</param>
            <param name="elevation">The Z coordinate of the rectangle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddPolyline(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Adds a polyline to the vector image
            </summary>
            <param name="vertices">list of vertices which describes the polyline</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddPolyline(Cti.Hardware.ScanDevice.PolylineShape)">
            <summary>
            Add an PolylineShape to the VectorImage
            </summary>
            <param name="polylineShape"></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddPolygon(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Adds a polygon to the vector image
            </summary>
            <param name="vertices">list of vertices which define the polygon</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddDeg3BezierPath(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Adds a degree 3 bezier to the vector image
            </summary>
            <param name="controlPoints">list of vertices which describe the bezier</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddDeg3BezierPath(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D},System.Single)">
            <summary>
            Adds a degree 3 bezier to the vector image
            </summary>
            <param name="controlPoints">list of vertices which describe the bezier</param>
            <param name="maxSegmentationError">maximum allowed error for segmenting</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddDeg3BezierPath(Cti.Hardware.ScanDevice.Degree3BezierShape)">
            <summary>
            Adds a degree 3 bezier to the vector image
            </summary>
            <param name="degree3BezierShape"></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddTextShape(Cti.Hardware.ScanDevice.TextShape)">
            <summary>
            Adds a TextShape to the vector image 
            </summary>
            <param name="shape">TextShape to be added</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddTextShape(Cti.Hardware.ScanDevice.TextShape,System.Single)">
            <summary>
            Adds a TextShape to the vector image 
            </summary>
            <param name="shape">TextShape to be added</param>
            <param name="maximumSegmentationError">maximum allowed error for segmenting</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddHatchShape(Cti.Hardware.ScanDevice.HatchShape,System.Single)">
            <summary>
            Adds a HatchShape to the VectorImage
            </summary>
            <param name="shape">HatchShape to add</param>
            <param name="elevation">Z coordinate of the shape</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddBarcodeShape(Cti.Hardware.ScanDevice.DataMatrixBarcodeShape)">
            <summary>
            Adds a datamatrix barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">DataMatrix shape defines all the necessary info about barcode</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddBarcodeShape(Cti.Hardware.ScanDevice.LinearBarcodeShape)">
            <summary>
            Adds a linear barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">barcode shape defines all the necessary info about barcode</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddBarcodeShape(Cti.Hardware.ScanDevice.QRCodeBarcodeShape)">
            <summary>
            Adds a QR code barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">QR code shape defines all the necessary info about barcode</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddBarcodeShape(Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape)">
            <summary>
            Adds a MicroQrcode barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">MicroQrcode shape defines all the necessary info about barcode</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddBarcodeShape(Cti.Hardware.ScanDevice.PdfBarcodeShape)">
            <summary>
            Adds a PDF417 barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">PDF417 shape defines all the necessary info about barcode</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddBarcodeShape(Cti.Hardware.ScanDevice.MacroPdfBarcodeShape)">
            <summary>
            Adds a MacroPDF417 barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">MacroPDF417 shape defines all the necessary info about barcode</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddRasterImageShape(Cti.Hardware.ScanDevice.RasterImageShape)">
            <summary>
            Adds a RasterImageShape to the vector image
            </summary>
            <param name="imageShape">Contains the data need to construct a RasterImageShape</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddSpiralShape(Cti.Hardware.ScanDevice.SpiralShape,System.Single)">
            <summary>
            Adds a spiral shape to the VectorImage
            </summary>
            <param name="spiralShape">Spiral shape defines all the necessary information about spiral</param>
            <param name="maxSegmentationError">The maximum length of small line segments</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddDrillShape(Cti.Hardware.ScanDevice.DrillShape)">
            <summary>
            Adds a dot list shape to the VectorImage
            </summary>
            <param name="drillShape">Dot List Shape defines all the necessary information about dot list</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorBase.AddCutterComponsationResult(System.Collections.Generic.List{Gsi.Framework.Shapes.GsiShape},Cti.Hardware.ScanDevice.Base.CutterCompensationDirection,System.Single,System.Single,System.Boolean)">
            <summary>
            Add Cutter Componsation Result Using Offset Algorithm
            </summary>
            <param name="boundaryShapes"></param>
            <param name="cutterCompensationDirection"></param>
            <param name="cutterCompensationWidth"></param>
            <param name="maxSegmentationError"></param>
            <param name="reverseResultShapes">The offset result always in clockwise direction .reverseResultShapes true for anticlockwise boundaryShapes</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.VectorBase.ScanCommandSets">
            <summary>
            Each ScanCommandSet carries a set of ScanCommands which are having same laser parameters
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.LinearBarcodeShape">
            <summary>
            Used to encapsulate properties of a linear barcode shape. This is used by <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> to scan a linear barcode using the scan device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.LinearBarcodeShape.#ctor">
            <summary>
            Initialize a new instance of linear barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.Location">
            <summary>
            Gets or sets the location of the linear barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.QuietZone">
            <summary>
            Gets or sets the existence of quite zone for the linear barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.BarcodeType">
            <summary>
            Gets or sets the type of the linear barcode shape, which can be "Codabar", "Code128", etc.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.Height">
            <summary>
            Gets or sets the height of the linear barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.Width">
            <summary>
            Gets or sets the width of the linear barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.PrintRatio">
            <summary>
            Gets or sets the print ratio of  the linear barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.Text">
            <summary>
             Gets or sets the barcode text of the linear barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of the linear barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.Angle">
            <summary>
            Gets or sets the rotation angle of the linear barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.InvertImage">
            <summary>
            Gets or sets a value indicating whether the linear barcode shape is inverted.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.FlipHorizontally">
            <summary>
            Gets or sets the value indicating whether the linear barcode shape is flipped in horizontal direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.FlipVertically">
            <summary>
            Gets or sets the value indicating whether the linear barcode shape is flipped in vertical direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LinearBarcodeShape.MarkingOrder">
            <summary>
            Gets or sets the order of the marking of the linear barcode shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.LocalizingResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.DeviceDiagnosticService_DeviceFailureException">
            <summary>
              Looks up a localized string similar to Failed to execute command..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.DeviceDiagnosticService_FialToStartDiagnosticSession">
            <summary>
              Looks up a localized string similar to Failed to start diagnostic session on {0}.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.DeviceDiagnosticService_InvalidOperationException">
            <summary>
              Looks up a localized string similar to Session has not yet started. Call &apos;StartSession&apos; first..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.DeviceDiagnosticService_ObjectDisposeException">
            <summary>
              Looks up a localized string similar to Device Diagnostic Service is already closed. This could happen if another Device Diagnostic Service or a ScanDocument is created..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.DeviceDiagnosticService_SessionAlreadyStarted">
            <summary>
              Looks up a localized string similar to Session is already started..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMessage_HatchShape_HatchOffsetInterferenceIndexNotImplemented">
            <summary>
              Looks up a localized string similar to HatchOffsetAlgorithm.InterferenceIndex algorithm is not implemented.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMessage_ScanDeviceManager_PinName">
            <summary>
              Looks up a localized string similar to pinName.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMessage_ScanDeviceManager_PinNameEmpty">
            <summary>
              Looks up a localized string similar to Pin name cannot be empty.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_DeviceStatusCategoryNotEnabledException_DeviceStatusNotEnabled">
            <summary>
              Looks up a localized string similar to Status is queried for {0} but enabled only for {1}. Please enable {0} using HardwareController.EnabledStatusCategories.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_DynamicArcTextShape_FontNameSpecifyError">
            <summary>
              Looks up a localized string similar to The font name should be provided without folder or drive names.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_DynamicTextShape_LineSpaceShouldBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Line Space should be greater than zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_DynamicTextShape_SerpentineHatchPatternsNotSupportedForDynamicShapes">
            <summary>
              Looks up a localized string similar to Serpentine hatch patterns not supported for dynamic shapes.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_EmbedFontFileNotFound">
            <summary>
              Looks up a localized string similar to Could not locate the font file. If it is a true type font, install to the system and provide font face name only. If it is OVF font provide absolute file path..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_JobStoringError">
             <summary>
               Looks up a localized string similar to Device failed to store the job.
            Reason: {0}.
             </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_OfflineScanDocumentStoreInCard">
            <summary>
              Looks up a localized string similar to Offline scan document can only be stored in host pc only.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_RasterImageShape_EnergyProfileNotHave256Entries">
            <summary>
              Looks up a localized string similar to Energy Profile should contain exactly 256 entries.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_RasterImageShape_EnergyProfileValuesOutOfRange">
            <summary>
              Looks up a localized string similar to Energy Profile values should be within the range of 0 to 1..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_RasterImageShape_invalidImageHeight">
            <summary>
              Looks up a localized string similar to Image Height should be grater than zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_RasterImageShape_invalidImageWidth">
            <summary>
              Looks up a localized string similar to Image width should be grater than zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_Reason_RasterImageShape_Value">
            <summary>
              Looks up a localized string similar to value.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_ConfigurationFileNotFound">
            <summary>
              Looks up a localized string similar to Configuration file {0} is not found..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_ConnectToDeviceFailed">
            <summary>
              Looks up a localized string similar to Failed to disconnect {0}.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_ConnectWithTheDevice">
            <summary>
              Looks up a localized string similar to Connect with the device.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_CorrectionTableFileNameShouldBeGivenWithoutAnyFolderPathsOrExtension">
            <summary>
              Looks up a localized string similar to Correction table file name should be given without any folder paths or extension.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_DeviceAlreadyInUse">
            <summary>
              Looks up a localized string similar to Device {0} is already in use..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_DeviceClassDoesNotSupportOffline">
            <summary>
              Looks up a localized string similar to Device class &apos;{0}&apos; does not support offline services.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_DeviceClassNameEmpty">
            <summary>
              Looks up a localized string similar to &apos;deviceClassName&apos; cannot be null or empty.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_DeviceClassNotLoaded">
            <summary>
              Looks up a localized string similar to Device class &apos;{0}&apos; is not loaded.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_DeviceNotFound">
            <summary>
              Looks up a localized string similar to Device: {0} not found..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_FailToConnect">
            <summary>
              Looks up a localized string similar to Failed to connect {0}.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_FailToConnectDetailed">
             <summary>
               Looks up a localized string similar to Failed to connect {0}
            
            Reason: {1}..
             </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_FileSavedUsingNewerVersion">
            <summary>
              Looks up a localized string similar to File is saved using a newer version ScanMaster Designer..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_HardwareManagerFailed">
             <summary>
               Looks up a localized string similar to ScanDevice manager initializing failed.
            Reason: {0}.
             </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_HardwareManagerInitFailedBasic">
            <summary>
              Looks up a localized string similar to ScanDevice manager initializing failed..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_HwManagersLoadingFailed">
            <summary>
              Looks up a localized string similar to Hardware configuration is not loaded properly or there are no hardware managers. Call LoadConfiguration() using a proper xml stream/file before calling this..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_IncorrectFormatXml">
            <summary>
              Looks up a localized string similar to Xml is not in correct format.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_LoadConfigurationDataFail">
             <summary>
               Looks up a localized string similar to Configuration data loading failed while attempt to read configuration files from the device. 
            {0}.
             </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_NoHardwareManagersFound">
            <summary>
              Looks up a localized string similar to No Hardware Managers are found in configuration..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_SavedWithoutDeviceIndependentScaningData">
            <summary>
              Looks up a localized string similar to File is saved using ScanMaster Designer without selecting to save Device Independent Scanning Data..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_ScanDeviceManagerLoadingFailed_AssemblyNotFound">
            <summary>
              Looks up a localized string similar to Assembly {0} could not be found..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_ScanDeviceManagerLoadingFailed_ConstructorFalied">
            <summary>
              Looks up a localized string similar to Type {0}.{1} could not be loaded. Constructor failed.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_ScanDeviceManagerLoadingFailed_Default">
            <summary>
              Looks up a localized string similar to Type {0}.{1} could not be loaded..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_ScanningDataSavedUsingNewerVersion">
            <summary>
              Looks up a localized string similar to File is of type device independent scanning data. But this is saved using a newer version of Api.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_StoredDataIncompatible">
            <summary>
              Looks up a localized string similar to The data is not compatible with &apos;{0}&apos; devices.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_VectorImageNameEmpty">
            <summary>
              Looks up a localized string similar to &apos;name&apos; cannot cannot be empty or null.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDeviceManager_VectorImageNameInvalid">
            <summary>
              Looks up a localized string similar to &apos;name&apos; cannot start with a number.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_BinaryEmbeddedFontsCannotBeChanged">
            <summary>
              Looks up a localized string similar to Embedded fonts cannot be changed for ScanDocument&apos;s created using binary data.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_BinaryScriptCanntpBeChanged">
            <summary>
              Looks up a localized string similar to Script cannot be changed for ScanDocument&apos;s created using binary data.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_DisposedInstance">
            <summary>
              Looks up a localized string similar to Instance is disposed and cannot be used for scanning..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_DuplicatedVectorImageNames">
            <summary>
              Looks up a localized string similar to A vector image having the same name is already in the ScanDocument..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_Exception_DeviceSpecficScanDocCannotBeStored">
            <summary>
              Looks up a localized string similar to Device specific ScanDocument&apos;s cannot be stored to stream.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_Exception_StoringOnlyForStreams">
            <summary>
              Looks up a localized string similar to Storing to stream supported only for offline ScanDocument&apos;s.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_Exception_Stream">
            <summary>
              Looks up a localized string similar to stream.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_MarkingFailedNotConnected">
            <summary>
              Looks up a localized string similar to Connect to the device before start marking.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_MarkingFailedReason">
             <summary>
               Looks up a localized string similar to Failed to start marking on device {0}
            Reason: {1}.
             </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanDocument_VectorImageNameInvalidChars">
            <summary>
              Looks up a localized string similar to &apos;name&apos; cannot contain following characters..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_ScanningNotSupported">
            <summary>
              Looks up a localized string similar to Could not start scanning of an offline scan document. It can only be stored in host pc..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_SpiralShape_CenterPointCannotBeNull">
            <summary>
              Looks up a localized string similar to Center point cannot be null.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_SpiralShape_InnerRadiusGreaterEqualToZero">
            <summary>
              Looks up a localized string similar to Inner radius should be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_SpiralShape_InnerRotationsGreaterOrEqualToZero">
            <summary>
              Looks up a localized string similar to Inner rotations should be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_SpiralShape_OuterRadiusGreaterThanZero">
            <summary>
              Looks up a localized string similar to Outer radius should be greater than zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_SpiralShape_OuterRotationsGreaterOrEqualZero">
            <summary>
              Looks up a localized string similar to Outer rotations should be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_SpiralShape_PitchShouldBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Pitch should be greater than zero.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_StoreDocumentError">
             <summary>
               Looks up a localized string similar to Device failed to store the job.
            Reason: {0}.
             </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_TextShape_LocationCannotBeNull">
            <summary>
              Looks up a localized string similar to Location cannot be null.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_TextShape_StrikeoutAndUnderlineFontStylesAreNotSupported">
            <summary>
              Looks up a localized string similar to Strikeout and Underline font styles are not supported.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ErrorMsg_VectorImage_BezierPathPointCount">
            <summary>
              Looks up a localized string similar to Number of control points should be {1 + 3 * Number of beziers}. Each connection point of two beziers are shared..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ExceptionHeader_DynamicArcTextShape_FontName">
            <summary>
              Looks up a localized string similar to fontName.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LocalizingResources.ExecptionHeader_RasterImageShape_EnergyProfile">
            <summary>
              Looks up a localized string similar to energyProfile.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceManager_DeviceBusy">
            <summary>
              Looks up a localized string similar to Device: {0} is busy..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceManager_DeviceNotFound">
            <summary>
              Looks up a localized string similar to Device: {0} not found..
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceManager_HardwareManagerInitStarted">
            <summary>
              Looks up a localized string similar to Managers initialization started.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceManager_HardwareManagerNamedInitFailedReason">
            <summary>
              Looks up a localized string similar to Hardware manager {0} initializing failed. Reason: {1}.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceManager_HwControllerStarting">
            <summary>
              Looks up a localized string similar to Starting.. public HWController().
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceManager_HWManagersInitFinished">
            <summary>
              Looks up a localized string similar to Managers initialization finished.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceManager_StartingToClose">
            <summary>
              Looks up a localized string similar to Starting.. public void Close().
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.LoggerAndDeuggerResources.LoggerMsg_ScanDeviceMananger_HardwareManagerInitFailedDetailed">
            <summary>
              Looks up a localized string similar to Hardware manager {0} initializing failed. Reason: {1} Stack Trace: {2}.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape">
            <summary>
            Used to encapsulate properties of a macro PDF barcode shape. This is used by <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> to scan a macro PDF barcode using the scan device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.#ctor">
            <summary>
             Initialize a new instance of macro PDF barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.Location">
            <summary>
            Gets or sets the location of the macro PDF barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.Height">
            <summary>
            Gets or sets the height of the macro PDF barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.Text">
            <summary>
            Gets or sets the text of the macro PDF barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.HatchPattern">
            <summary>
            Gets or sets the location of the macro PDF barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.Angle">
            <summary>
            Gets or sets the rotation angle of the macro PDF barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.InvertImage">
            <summary>
            Gets or sets a value indicating whether the macro PDF barcode shape is inverted.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.QuietZone">
            <summary>
            Gets or sets the existence of quiet zone for the macro PDF barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.AutoExpand">
            <summary>
            Gets or sets the value indicating whether the size of macro PDF barcode shape can be auto expanded.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.FlipHorizontally">
            <summary>
            Gets or sets the value indicating whether the macro PDF barcode shape is flipped in horizontal direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.FlipVertically">
            <summary>
            Gets or sets the value indicating whether the macro PDF barcode shape is flipped in vertical direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.MarkingOrder">
            <summary>
            Gets or sets the order of the marking of the macro PDF barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.CompactMode">
            <summary>
            Gets or sets the compaction mode of the marking of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.ErrorCorrectionLevel">
            <summary>
            Gets of sets the error correction level of the macro PDF barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.Width">
            <summary>
            Gets of sets the width level of the macro PDF barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.NumberOfRows">
            <summary>
            Gets of sets the number of rows level of the macro PDF barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MacroPdfBarcodeShape.NumberOfColumns">
            <summary>
            Gets of sets the number of columns level of the macro PDF barcode shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape">
            <summary>
            Used to encapsulate properties of a microQR barcode shape. This is used by <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> to scan a microQR barcode using the scan device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.#ctor">
            <summary>
             Initialize a new instance of microQR barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.Location">
            <summary>
            Gets or sets the location of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.Height">
            <summary>
            Gets or sets the height of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.Text">
            <summary>
            Gets or sets the text of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.Angle">
            <summary>
            Gets or sets the rotation angle of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.InvertImage">
            <summary>
            Gets or sets a value indicating whether the microQR barcode shape is inverted.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.QuietZone">
            <summary>
            Gets or sets the existence of quiet zone for the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.FlipHorizontally">
            <summary>
            Gets or sets the value indicating whether the microQR barcode shape is flipped in horizontal direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.FlipVertically">
            <summary>
            Gets or sets the value indicating whether the microQR barcode shape is flipped in vertical direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.ErrorCorrectionLevel">
            <summary>
            Gets of sets the error correction level of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.CodeSize">
            <summary>
            Gets or sets the microQR barcode size.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.EncodingMode">
            <summary>
            Gets or sets the encoding mode of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.MaskPattern">
            <summary>
            Gets or sets the mask pattern of the microQR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.AutoExpand">
            <summary>
            Gets or sets the value indicating whether the size of microQR barcode shape can be auto expanded.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape.MarkingOrder">
            <summary>
            Gets or sets the order of the marking of the microQR barcode shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.NonLocalizingResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ErrorMsgObject_ScanDocument_Name">
            <summary>
              Looks up a localized string similar to name.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ErrorMsgObject_ScanDocument_ScanDocument">
            <summary>
              Looks up a localized string similar to ScanDocument.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.FileName_ScanDeviceManager_ConfigurationFile">
            <summary>
              Looks up a localized string similar to Configuration.xml.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ScriptCommand_Scanall">
            <summary>
              Looks up a localized string similar to ScanAll().
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDeviceManager_DeviceInterlockTriggeredEventThread">
            <summary>
              Looks up a localized string similar to Device Interlock Triggered Event Thread.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDeviceManager_HWMgrDeviceChangedNotifyThreadName">
            <summary>
              Looks up a localized string similar to HWMgrDevicesChangeNotifier.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDeviceManager_HwMgrFailedNotifyTHreadName">
            <summary>
              Looks up a localized string similar to HWMgrFailedNotifier.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDeviceManager_HWMgrStatusNotifyThread">
            <summary>
              Looks up a localized string similar to HWMgrDeviceStatusNotifier.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDeviceManager_InitializeHardwareThread">
            <summary>
              Looks up a localized string similar to Initialize Hardware Thread.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDeviceManager_StatusUpdateThread">
            <summary>
              Looks up a localized string similar to Status Update Thread.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDocumet_AbortScriptMessageReceiveThread">
            <summary>
              Looks up a localized string similar to Abort Script Message Receive Thread.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDocumet_DocumentScanningStatusChangeNotifyThread">
            <summary>
              Looks up a localized string similar to Document Scanning Status Change Notify Thread.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.NonLocalizingResources.ThreadName_ScanDocumet_ScriptMessageReceiveThread">
            <summary>
              Looks up a localized string similar to Script Message Receive Thread.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceInterlockEventArgs">
            <summary>
            Description of ScanDeviceInterlockEventArgs.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceInterlockEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceInterlockEventArgs"/> class.
            </summary>
            <param name="deviceUniqueName">Unique name of the device.</param>
            <param name="interlockName">Name of the interlock.</param>
            <param name="message">The message to be given when the interlock fires.</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceInterlockEventArgs.DeviceUniqueName">
            <summary>
            Gets the unique name of device.
            </summary>
            <value>
            The unique name of device.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceInterlockEventArgs.InterlockName">
            <summary>
            Gets the name of the interlock.
            </summary>
            <value>
            The name of the interlock.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceInterlockEventArgs.Message">
            <summary>
            Gets the interlock message.
            </summary>
            <value>
            The interlock message.
            </value>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.PdfBarcodeShape">
            <summary>
            Used to encapsulate properties of a PDF417 barcode shape. This is used by <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> to scan a PDF417 barcode using the scan device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.PdfBarcodeShape.#ctor">
            <summary>
            Initialize a new instance of PDF417 barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.Location">
            <summary>
            Gets or sets the location of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.Height">
            <summary>
            Gets or sets the height of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.Text">
            <summary>
            Gets or sets the text of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.Angle">
            <summary>
            Gets or sets the rotation angle of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.InvertImage">
            <summary>
            Gets or sets a value indicating whether the PDF417 barcode shape is inverted.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.QuietZone">
            <summary>
            Gets or sets the existence of quiet zone for the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.AutoExpand">
            <summary>
            Gets or sets the value indicating whether the size of PDF417 barcode shape can be auto expanded.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.FlipHorizontally">
            <summary>
            Gets or sets the value indicating whether the PDF417 barcode shape is flipped in horizontal direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.FlipVertically">
            <summary>
            Gets or sets the value indicating whether the PDF417 barcode shape is flipped in vertical direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.MarkingOrder">
            <summary>
            Gets or sets the order of the marking of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.CompactMode">
            <summary>
            Gets or sets the compaction mode of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.ErrorCorrectionLevel">
            <summary>
            Gets or sets the error correction level of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.Width">
            <summary>
            Gets or sets the width of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.NumberOfRows">
            <summary>
            Gets or sets the number of rows of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PdfBarcodeShape.NumberOfColumns">
            <summary>
            Gets or sets the number of columns of the PDF417 barcode shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.PolylineShape">
            <summary>
            Represents a polyline which can be marked using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.PolylineShape.AddVertex(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Add point to verticelist
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.PolylineShape.Closed">
            <summary>
            Gets or sets the Closed
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.QRCodeBarcodeShape">
            <summary>
            Used to encapsulate properties of a QR barcode shape. This is used by <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> to scan a QR barcode using the scan device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.#ctor">
            <summary>
            Initialize a new instance of QR barcode shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.Location">
            <summary>
            Gets or sets the location of the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.Height">
            <summary>
            Gets or sets the height of the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.Text">
            <summary>
            Gets or sets the text of the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.Angle">
            <summary>
            Gets or sets the rotation angle of the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.InvertImage">
            <summary>
            Gets or sets a value indicating whether the QR barcode shape is inverted.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.QuietZone">
            <summary>
            Gets or sets the existence of quiet zone for the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.FlipHorizontally">
            <summary>
            Gets or sets the value indicating whether the QR barcode shape is flipped in horizontal direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.FlipVertically">
            <summary>
            Gets or sets the value indicating whether the QR barcode shape is flipped in vertical direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.ErrorCorrectionLevel">
            <summary>
            Gets or sets the error correction level of the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.CodeSize">
            <summary>
            Gets or sets the size of the the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.EncodingMode">
            <summary>
            Gets or sets the encoding mode of the the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.MaskPattern">
            <summary>
            Gets or sets the mask pattern of the QR barcode shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.AutoExpand">
            <summary>
            Gets or sets the value indicating whether the size of QR barcode shape can be auto expanded.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.QRCodeBarcodeShape.MarkingOrder">
            <summary>
            Gets or sets the order of the marking of the microQR barcode shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanDocument">
            <summary>
            ScanDocument encapsulate all the information necessary for a marking. It collects all the vector images, raster images,
            ScanScripts, Embedded fonts and laser variables. Further it exposes events to track marking, errors, reports and commands.
            <para>
            ScanDocument is created using ScanDeviceManager by specifying the device.
            Once created, it is bound to that device thus cannot be scanned using a different device.</para> 
            <para> 
            Once ScanDocument is used, it should be disposed and should not be used again. For each marking instance, a new ScanDocument
            should be generated.</para>
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.ScanDocument.scanningInformation">
            <summary>
            'scanningInformation' is valid only if scanDocumentDataMode = ScanDocumentDataMode.ScanningInformation
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.StartScanning">
            <summary>
            Starts scanning <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> on the device
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotConnectedException">Thrown when the device is not connected.
            Make sure you have connected the device before calling StartMarking</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException">Thrown when communication with the device failed</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceFailureException">Thrown when the device failed to start marking due to unknown reason</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.StopScanning">
            <summary>
            Stops the scanning of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> on the device
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.PauseScanning">
            <summary>
            Pause the scanning of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> on the device
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.ResumeScanning">
            <summary>
            Resume paused scanning of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> on the device
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.EmbedFont(System.String,System.Drawing.FontStyle,System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.UnicodeRange})">
            <summary>
            Embed fonts to the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/>
            </summary>
            <param name="fontName">Name of the font</param>
            <param name="fontStyle">FontStyle bold, italic, etc.. </param>
            <param name="unicodeRanges">Unicode range of the font to be embeded <see cref="T:Cti.Hardware.ScanDevice.Base.UnicodeRange"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.SetLaserPropertyVariableList(System.Collections.ObjectModel.Collection{Cti.Hardware.ScanDevice.Base.LaserParameters})">
            <summary>
            Set the Laser variables
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.StoreScanDocument(Cti.Hardware.ScanDevice.Base.StoredScanDocumentEntry)">
            <summary>
            Stores the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> on the device
            </summary>
            <param name="scanDocumentEntry">File entry to store the scan document</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.StoreScanDocument(System.IO.Stream)">
            <summary>
            Store's the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> to the stream provided. 
            Only device independent + offline <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/>'s can be stored to a Stream.
            </summary> 
            <param name="stream">Stream to store ScanDocument</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the ScanDocument is not offline or if it is an device specific <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/></exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.CreateVectorImage(System.String,Cti.Hardware.ScanDevice.Base.DistanceUnit)">
            <summary>
            Creates a <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> in the speified measuring units
            </summary>
            <param name="name">Name of the <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/>, this property needs to be a unique if found that it has been already found will through an exception</param>
            <param name="distanceUnits">Mesuring units</param>
            <returns>The <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> created by the method </returns>		
            <exception cref="T:System.ArgumentException">Thrown when the specified name contains invalid characters or if a <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> is already created with the same name</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDocument.SendCommand(System.String,System.String[])">
            <summary>
            Send command to the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> 
            </summary>
            <param name="command">Command to be sent</param>
            <param name="args">Optional arguments for the command</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDocument.PreviewInfo">
            <summary>
            Gets or sets the preview state of the scan document
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDocument.TransformMatrix2D">
            <summary>
            Gets or sets the transformation to be applied to the whole <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/>.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDocument.Offset">
            <summary>
            Gets or sets the offset vector to be applied to the whole <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/>.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDocument.AfterCompletion">
            <summary>
            Gets or sets the completion state of the scanning
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDocument.BeforeStart">
            <summary>
            Gets or sets the staring state of the scanning
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDocument.DataType">
            <summary>
            Gets the data type of the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/>. 
            This depends on the method used in <see cref="T:Cti.Hardware.ScanDevice.ScanDeviceManager"/> to create the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/>.
            Some properties/methods of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> are restricted when this is DeviceTypeIndependentRawData or DeviceTypeSpecificRawData types.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDocument.Scripts">
            <summary>
            Gets the collection of scripts which are used in <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> 
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDocument.DocumentScanningStatusChanged">
            <summary>
            Occurs when the scanning status of the document is changed
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDocument.DocumentScanningStatusChangedCom">
            <summary>
            Occurs when the scanning status of the document is changed. This is same as event DocumentScanningStatusChanged.
            This is supposed to be used in COM. .Net applications should always use DocumentScanningStatusChanged
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDocument.ScriptMessageReceived">
            <summary>
            Occurs when a message occured in the script job. The message could be a report or an error
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDocument.ScriptMessageReceivedCom">
            <summary>
            Occurs when a message occured in the script job. The message could be a report or an error. This is same as event ScriptMessageReceived.
            This is supposed to be used in COM. .Net applications should always use ScriptMessageReceived
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDocument.ScriptCommandReceived">
            <summary>
            Occurs when script job sends a command.
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDocument.ScriptCommandReceivedCom">
            <summary>
            Occurs when script job sends a command.This is same as event ScriptCommandReceived.
            This is supposed to be used in COM. .Net applications should always use ScriptCommandReceived
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DynamicTextShape">
            <summary>
            Used to encapsulate properties of a dynamic text shape. This is used by <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/> to scan a dynamic text using the scan device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DynamicTextShape.#ctor">
            <summary>
            Initialize a new instance of DynamicTextShape
            this is basically a TextShape where user can change some properties dynamically
            such as text, location, height etc..
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DynamicTextShape.SetLineHatchPattern(System.Single,System.Single,Cti.Hardware.ScanDevice.Base.HatchLineStyle)">
            <summary>
            Sets the line hatch pattern of DynamicTextShape
            </summary>
            <param name="lineSpace">The line space of hatch style.</param>
            <param name="angle">The angle of hatch.</param>
            <param name="style">The hatch style.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">lineSpace;Line Space should be greater than zero</exception>
            <exception cref="T:System.NotSupportedException">Serpentine hatch patterns not supported for dynamic shapes</exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.Location">
            <summary>
            Gets or sets the loaction of the DynamicTextShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.Height">
            <summary>
            Gets or sets the text height of the DynamicTextShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.VariableName">
            <summary>
            Gets or sets the variable name of the DynamicTextShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.Text">
            <summary>
            Gets or sets the text of the DynamicTextShape 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.EvaluateVariableTags">
            <summary>
            Gets or sets the value indicating whether the variables withing the texts is processed as variables.
            Set this property to false will discard the valiables withing the text and scanns the text as it is 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.FontName">
            <summary>
            Gets or sets the name of the font which is used to draw the text.
            Provide Font face name if True Type or file name without folder or drive names if .ovf
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.CharacterGap">
            <summary>
            Gets or sets the charactor gap of the text 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.ScaleX">
            <summary>
            Gets or sets the X scaling of the DynamicTextShape as a precentage value
            Setting this to 100 is same as unscaled size
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.ScaleY">
            <summary>
            Gets or sets the Y scaling of the DynamicTextShape as a precentage value
            Setting this to 100 is same as unscaled size
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.Angle">
            <summary>
            Gets or sets the rotation anlge of the shape measured from positive-X direction
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.DotDurationInMicroseconds">
            <summary>
            Gets or sets the dot duration of DynamicTextShape in microseconds
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.MarkingOrder">
            <summary>
            Gets or sets the value indicating the output of hatching and the order.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DynamicTextShape.HatchPattern">
            <summary>
            Gets or sets the Hatch pattern associated with text
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException">
            <summary>
            Description of DeviceStatusCategoryNotEnabledException.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.#ctor(Cti.Hardware.ScanDevice.Base.DeviceStatusCategories,Cti.Hardware.ScanDevice.Base.DeviceStatusCategories)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"/> class.
            </summary>
            <param name="enabledCategory">The enabled device status category.</param>
            <param name="queriedCategory">The queried device status category.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DeviceStatusCategoryNotEnabledException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceStatusCategoryNotEnabledException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.EnabledCategories">
            <summary>
            Gets the enabled status categories
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException.QueriedCategories">
            <summary>
            Gets the category which is queried
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.RasterImageShape">
            <summary>
            Used to encapsulate raste image information for marking using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.RasterImageShape.GetEnergyProfile">
            <summary>
            Gets the energy profile1 of the raster image.
            Returns a list of pulse width values against the intensity level if pixel modulation is set to PulseWidth
            or a list of laser power values if pixel modulation is set to Power
            or a list of laser on time values if pixel modualation is set to LaserOnTime
            or a list of pulse period values if pixel modualation is set to PulsePeriodAndDutyCycle.
            </summary>
            <returns>Returns energy profile one</returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.RasterImageShape.SetEnergyProfile(System.Single[])">
            <summary>
            Sets energy profile two value
            </summary>
            <param name="energyProfile"></param>
            <exception>ArgumentException: Thrown if energy profile does not contains exactly 256 elements</exception>
            <exception>ArgumentOutOfRangeException: Thrown if any energy profile value is not in the range of 0 to 1.</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.RasterImageShape.#ctor">
            <summary>
            Initialize a new instance of RasterImageShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.VariableName">
            <summary>
            Gets or set the variable name of the DynamicArcTextShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.RawImageData">
            <summary>
            Gets or sets raw image pixel data. The data should be of 16 bits per pixel (2 bytes)
            The pixel width and height is calculated using Width, Height, DotsPerUnitLengthHorizontal and DotsPerUnitLengthVertical
            properties.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.Port">
            <summary>
            Gets or sets the port in which the analog 
            voltage output is available when a raster image scanning is done
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.ImageData">
            <summary>
            Gets or sets the bitmap of the RasterImageShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.Location">
            <summary>
            Gets or sets the location of the RasterImageShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.RasterLineOffsetX">
            <summary>
            Gets or sets raster line offset in X direction which will be used to compensate galvo delays
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.RasterLineOffsetY">
            <summary>
            Gets or sets raster line offset in Y direction which will be used to compensate galvo delays
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.Height">
            <summary>
            Gets or set the height of the RasterImageShape, this need to be a positive value
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.Width">
            <summary>
            Gets or set the width of the RasterImageShape, this need to be a positive value
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.Angle">
            <summary>
            Gets or sets the rotation angle of the RasterImageShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.LeadIn">
            <summary>
             Gets or sets the lead-in distance that adds start point of a raster line
             Note: The start point of a raster line varies according to the Pixel scanning direction
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.LeadOut">
            <summary>
            Gets or sets the lead-out distance that adds end point of a raster line
            Note: The end point of a raster line varies according to the Pixel scanning direction
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.LeadPixelsColor">
            <summary>
            Gets or sets the lead-in and lead-out pixel color of a raster line
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.DotsPerUnitLengthHorizontal">
            <summary>
            Dots per one unit length of the current document units in the horizontal direction 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.DotsPerUnitLengthVertical">
            <summary>
            Dots per one unit length of the current document units in the vertical direction 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.LaserOnTime">
            <summary>
            Gets or sets value indicating the laser on time for scanning of this RasterImageShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.PulsePeriod">
            <summary>
            Gets or sets value indicating the pulse period for scanning of this RasterImageShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.PixelModulation">
            <summary>
            Gets or sets the PixelModulation type of the RasterImageShape <see cref="P:Cti.Hardware.ScanDevice.RasterImageShape.PixelModulation"/>
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.RasterScanningDirection">
            <summary>
            Gets or sets the scanning direction of the RasterImageShape <see cref="P:Cti.Hardware.ScanDevice.RasterImageShape.RasterScanningDirection"/>
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.PixelScanningDirection">
            <summary>
            Gets or sets the pixel scanning direction of the RasterImageShape <see cref="P:Cti.Hardware.ScanDevice.RasterImageShape.PixelScanningDirection"/>
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.SettlingTime">
            <summary> 
            Gets or sets the settling time before firing the laser on delay in jump and fire mode
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.LaserOffDelay">
            <summary> 
            Gets or sets the laser off delay time in jump and fire mode
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.SkippingColorRanges">
            <summary>
            Gets the collection of color ranges o skip to save time when scanning
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.FunctionName">
            <summary>
            Gets or sets the name of the function which will be called after marking line count specified by <see cref="P:Cti.Hardware.ScanDevice.RasterImageShape.LineCount"/> 
            in progressive mode (see <see cref="P:Cti.Hardware.ScanDevice.RasterImageShape.EnableNonProgressiveMode"/>)
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.EnableNonProgressiveMode">
            <summary>
            Gets or sets a value indicating whether the progressive mode is enabled. Progressive mode is used when a raster is needed to be marked without progressing to down word direction.
            This mode is used to mark raster images on cylindrical surfaces
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.RasterImageShape.LineCount">
            <summary>
            Gets or sets the number of lines which will be marked progressively in progressive mode.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.OffsetVector">
            <summary>
            Holds transformation offsets.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.OffsetVector.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initialize a new instance of OffsetVector with following parameters
            </summary>
            <param name="x">x offset measured from origin</param>
            <param name="y">y offset measured from origin</param>
            <param name="z">z offset measured from origin</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.OffsetVector.#ctor">
            <summary>
            Initialize a new instance of OffsetVector
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.OffsetVector.X">
            <summary>
            Gets or sets the X offset
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.OffsetVector.Y">
            <summary>
            Gets or sets the Y offset
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.OffsetVector.Z">
            <summary>
            Gets or sets the Z offset
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanDocumentDataType">
            <summary>
            Depending on the method used to create the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> the data type of the <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> changes.
            Some properties/methods are restricted for DeviceTypeIndependentRawData and DeviceTypeSpecificRawData types.
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.ScanDocumentDataType.ApiData">
            <summary>
            Can change any property, embed fonts, create new vector images, etc before scanning or uploading.
            This data type is the most flexible data type.
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.ScanDocumentDataType.DeviceTypeIndependentRawData">
            <summary>
            Can change TransformMatrix2D, Offset, AfterCompletionState, PreviewInfo properties before scanning or uploading.
            Changing other may generate exeptions
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.ScanDocumentDataType.DeviceTypeSpecificRawData">
            <summary>
            Nothing can be changed. Can only be used to scan or upload to the device.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanImageRenderer">
            <summary>
            Description of ScanImageRenderer.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.SpiralShape">
            <summary>
            Represents a spiral which can be marked using VectorImage
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.SpiralShape.#ctor">
            <summary>
            Provides methods to initialize and manipulate instances of SpiralShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.CenterPoint">
            <summary>
            Gets or sets the center point of the spiral
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.Pitch">
            <summary>
            Gets or sets the pitch of the spiral
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.InnerRadius">
            <summary>
            Gets or sets the inner radius of the spiral
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.OuterRadius">
            <summary>
            Gets or sets the outer radius of the spiral
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.Angle">
            <summary>
            Gets or sets the angle of the spiral
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.InnerRotations">
            <summary>
            Gets or sets the number of inner rotations of the spiral
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.OuterRotations">
            <summary>
            Gets or sets the outer rotations of the spiral
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.Clockwise">
            <summary>
            Gets or sets whether the sipral is clockwise or not
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.Outwards">
            <summary>
            Gets or sets whether the sipral is rotated outwards or not
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.SpiralShape.ReturnToStart">
            <summary>
            Gets or sets whether the sipral returns to the start position or not
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ConnectionStatus">
            <summary>
            Defines connection status of the device
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.ConnectionStatus.Connected">
            <summary>
            Connection status connected
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.ConnectionStatus.NotConnected">
            <summary>
            Connection status not connected
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.ConnectionStatus.NotAvailableForConnection">
            <summary>
            Connection status not available for connection
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceStatusSnapshot">
            <summary>
            Used to return the status of a device. The values found on the instance represents the 
            values on the device at the time of querying the snapshot.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.DigitalOutputStatus">
            <summary>
            Gets the status of the digital output pins
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.DigitalInputStatus">
            <summary>
            Gets the status of the digital input pins
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.ConnectionStatus">
            <summary>
            Gets the connection status of the device.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"></exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.ScanningStatus">
            <summary>
            Gets the scanning status of the device.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"></exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.DeviceUniqueName">
            <summary>
            Gets the unique name of the device.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.LaserPositionStatus">
            <summary>
            Gets the status of laser position.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"></exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.XY2Status">
            <summary>
            Gets the XY2-100 status.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"></exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.GSBStatus">
            <summary>
            Gets the GSBus status.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"></exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.MOTF0Position">
            <summary>
            Gets the MOTF0 position.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"></exception>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusSnapshot.MOTF1Position">
            <summary>
            Gets the MOTF1 position.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceStatusCategoryNotEnabledException"></exception>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DocumentScanningStatus">
            <summary>
            Defines the scanning status of the device
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.DocumentScanningStatus.Scanning">
            <summary>
            Scanning status, scanning
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.DocumentScanningStatus.NotScanning">
            <summary>
            Scanning status, not scanning
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.DocumentScanningStatus.Paused">
            <summary>
            Scanning status, paused
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.TextScript">
            <summary>
            Specify superscript / subscipt mode of text
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextScript.NoScript">
            <summary>
            Text is not superscript or subscript
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextScript.Subscript">
            <summary>
            Text is subscript
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextScript.Superscript">
            <summary>
            Text is superscript
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.TextVerticalAlign">
            <summary>
            Specify the vertical alignment of text
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextVerticalAlign.Top">
            <summary>
            Vertically top aligned
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextVerticalAlign.Center">
            <summary>
            Vertically center aligned
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextVerticalAlign.Bottom">
            <summary>
            Vertically bottom aligned
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.TextHorizontalAlign">
            <summary>
            Specify the horizontal alignment of text
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextHorizontalAlign.Left">
            <summary>
            Horizontally left aligned
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextHorizontalAlign.Center">
            <summary>
            Horizontally center aligned
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextHorizontalAlign.Right">
            <summary>
            Horizontally right aligned
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.TextLineSpaceStyle">
            <summary>
            Specify the line space style of text
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextLineSpaceStyle.Factor">
            <summary>
            Line space is specified as a factor of default value in font
            </summary>
        </member>
        <member name="F:Cti.Hardware.ScanDevice.TextLineSpaceStyle.Exactly">
            <summary>
            Line space is specified as exact value in current unit
            </summary>		
        </member>
        <member name="T:Cti.Hardware.ScanDevice.TransformMatrix2D">
            <summary>
            Holds transformation matrix scale components.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TransformMatrix2D.#ctor">
            <summary>
            Initialize a new instance of TransformMatrix2D, this will create a identy matrix of size 2 by 2 
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TransformMatrix2D.#ctor(System.Single)">
            <summary>
            Initialize a new instance of TransformMatrix2D
            </summary>
            <param name="angle">Rotation (angle) of the axis syetem measured from origin</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TransformMatrix2D.LoadIdentity">
            <summary>
            Loads the elements of the TransformMatrix2D from elements of Identity matrix.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TransformMatrix2D.M00">
            <summary>
            Gets or sets the (0,0) element of the matrix
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TransformMatrix2D.M01">
            <summary>
            Gets or sets the (0,1) element of the matrix
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TransformMatrix2D.M10">
            <summary>
            Gets or sets the (1,0) element of the matrix
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TransformMatrix2D.M11">
            <summary>
            Gets or sets the (1,1) element of the matrix
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.Character">
            <summary>
            Summary of the class CharacterSetting
            </summary>	
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.#ctor">
            <summary>
            Constructor for CharacterSetting
            </summary>	 
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.Copy(Cti.Hardware.ScanDevice.Character)">
            <summary>
            Copies the character from the charater specified 
            </summary>
            <param name="source">character to copy from</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.Clone">
            <summary>
            Clones the character
            </summary>
            <returns>A new chaer with same properties</returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.ToString">
            <summary>
            Creates and returns a string representation of the current instance of character class.
            </summary>
            <returns>
            string representation of the current instance of character class
            </returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.NoScript">
            <summary>
            Sets the script mode of the character to NoScript
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.Subscript(System.Single,System.Single)">
            <summary>
            Sets the character as a subscript character
            </summary>
            <param name="percentageSize">Percentage size of the subscript compared default percentage size, setting this
            to 100 is equivalent to keep the percentage default precentage size defined in the font</param>
            <param name="percentageLowered">Percentage lowered distance, compared to default distance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.Superscript(System.Single,System.Single)">
            <summary>
            Sets the character as a superscript character
            </summary>
            <param name="percentageSize">Percentage size of the subscript compared default percentage size, setting this
            to 100 is equivalent to keep the percentage default precentage size defined in the font</param>
            <param name="percentageRaised">Percentage raised distance, compared to default distance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.AddHatchPatternLine(System.Single,Cti.Hardware.ScanDevice.Base.HatchLineBorderGapDirection,System.Single,System.Single,System.Single,System.Single,Cti.Hardware.ScanDevice.Base.HatchLineStyle,System.Boolean,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with straight lines
            </summary>
            <param name="borderGap">Distance mesureed from shape to the border of the hatch</param>
            <param name="borderGapDirection"> whether the border gap is set to inside the shape or outside</param>
            <param name="lineGap">gap between hatch lines</param>
            <param name="lineAngle">angle of hatch lines</param>
            <param name="baseX">X position of the starting point of the hatch</param>
            <param name="baseY">Y position of the starting point of the hatch</param>
            <param name="hatchStyle">HatchLineStyle of the hatch<see cref="T:Gsi.Framework.Hatch.HatchLineStyle"/></param>
            <param name="withOffset">Setting this true will draw a border of the hatch</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Gsi.Framework.Hatch.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Gsi.Framework.Hatch.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.AddHatchPatternOffsetFilling(System.Single,Cti.Hardware.ScanDevice.Base.HatchOffsetStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles with even spaces
            </summary>
            <param name="offsetGap">Gap between two hatch lines</param>
            <param name="style">HatchOffsetStyle of the hatch<see cref="T:Gsi.Framework.Hatch.HatchOffsetStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Gsi.Framework.Hatch.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Gsi.Framework.Hatch.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.AddHatchPatternOffsetInOut(System.Single,System.Int32,System.Single,System.Int32,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles 
            </summary>
            <param name="insideOffsetGap">Gap between hatch lines which is drawn inside the shape</param>
            <param name="insideOffsetCount">Number of hatch lines drawn inside the shape</param>
            <param name="outsideOffsetGap">Gap between hatch lines which is drawn outside the shape</param>
            <param name="outsideOffsetCount">Number of hatch lines drawn outside the shape</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Gsi.Framework.Hatch.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Gsi.Framework.Hatch.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.AddHatchPatternHelixFilling(System.Single,Cti.Hardware.ScanDevice.Base.HelixStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with helix pattern
            </summary>
            <param name="helixGap">pitch of the helix</param>
            <param name="style">Style of the Helix <see cref="T:Gsi.Framework.Hatch.HelixStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Gsi.Framework.Hatch.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Gsi.Framework.Hatch.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.Character.ClearHatchPatterns">
            <summary>
            Clears all the hatch patterns added to the <see cref="T:Cti.Hardware.ScanDevice.Character"/>
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.Angle">
            <summary>
            Gets or sets the character angle
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.ScaleX">
            <summary>
            Gets or sets the X scale of the chatacter
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.ScaleY">
            <summary>
            Gets or sets the Y scale of the chatacter
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.ItalicAngle">
            <summary>
            Gets or sets the ItalicAngle of the chatacter
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.CharacterGap">
            <summary>
            Gets or sets the CharacterGap of the chatacter
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.Backward">
            <summary>
            Gets or sets the backward property of the chatacter, if set to true character will drawn backwards
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.UpsideDown">
            <summary>
            Gets or sets the UpsideDown property of the chatacter, if set to true character will drawn upside down
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.IncludeBorder">
            <summary>
            Gets or sets the border of the chatacter, if set to false character will drawn without a border
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.CharacterUnicode">
            <summary>
            Gets or sets the Unicode character
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.FontName">
            <summary>
            Get or set the Fontname (Name of the FontFace)
            Font face name if True Type font or full file path if .ovf font
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.Height">
            <summary>
            Get or set the text height in units specifiefd in the Vector Image
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.FontStyle">
            <summary>
            Get or sets the FontStyle of the character
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.Character.HatchPatternListInternal">
            <summary>
            Gets the hath pattern list 
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceStatusChangedEventArgs">
            <summary>
            Description of DeviceConnectionStatusEventArgs.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceStatusChangedEventArgs.#ctor(System.String,Cti.Hardware.ScanDevice.Base.DeviceStatusCategories)">
            <summary>
            Initialize a new instance of DeviceStatusChangedEventArgs
            </summary>
            <param name="deviceUniqueName">Name of the device</param>
            <param name="deviceStatusCategory">DeviceStatusCategories of the device</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusChangedEventArgs.DeviceUniqueName">
            <summary>
            Gets the name of the device
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceStatusChangedEventArgs.DeviceStatusCategory">
            <summary>
            Gets the DeviceStatusCategories of device
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DocumentScanningStatusEventArgs">
            <summary>
            Contains properties and methods of DocumentScanningStatusEventArgs class
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DocumentScanningStatusEventArgs.#ctor(Cti.Hardware.ScanDevice.DocumentScanningStatus,Cti.Hardware.ScanDevice.DocumentScanningStatusChangeReason)">
            <summary>
            Initialize a new instance of DocumentScanningStatusEventArgs
            This may use to fire the events on scanning status changes such as scanning, paused or stopped scanning
            </summary>
            <param name="documentScanningStatus">Scanning status of the document</param>
            <param name="scanningStatusChangeReason">The scanning status change reason.</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DocumentScanningStatusEventArgs.ScanningStatus">
            <summary>
            Gets the scanning status of the document.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DocumentScanningStatusEventArgs.ScanningStatusChangeReason">
            <summary>
            Gets the reason for the change od scanning status.
            </summary>
            <value>
            The scanning status change reason.
            </value>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ConfigurationLoadingException">
            <summary>
            ConfigurationLoadingException is thrown when error occurred during configuration file loading
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ConfigurationLoadingException.#ctor">
            <summary>
            Initializes a new instance of ConfigurationLoadingException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ConfigurationLoadingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of ConfigurationLoadingException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ConfigurationLoadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of ConfigurationLoadingException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ConfigurationLoadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.ConfigurationLoadingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ConfigurationLoadingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException">
            <summary>
            DeviceAlreadyInUseException is thrown when an access is made to a device already in use.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException.#ctor">
            <summary>
            Initializes a new instance of DeviceAlreadyInUseException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DeviceAlreadyInUseException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of DeviceAlreadyInUseException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="deviceUniqueName">Unique name of the device.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceAlreadyInUseException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException.DeviceUniqueName">
            <summary>
            Gets the unique name of the device.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException">
            <summary>
            DeviceCommunicationFailureException is thrown when error occurred during communication with the device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.#ctor">
            <summary>
            Initializes a new instance of DeviceCommunicationFailureException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DeviceCommunicationFailureException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of DeviceAlreadyInUseException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="deviceUniqueName">Unique name of the device.</param>
            <param name="deviceMessage">Message associated with the failure which is returned by the device specific driver.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceAlreadyInUseException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.DeviceUniqueName">
            <summary>
            Gets the name of the device failed
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException.DeviceMessage">
            <summary>
            Gets the message associated with the failure which is returned by the device specific driver
            </summary> 
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceFailureException">
            <summary>
            DeviceFailureException is thrown during device failures.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceFailureException.#ctor">
            <summary>
            Initializes a new instance of DeviceFailureException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DeviceFailureException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceFailureException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of DeviceFailureException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="deviceUniqueName">Unique name of the device.</param>
            <param name="deviceMessage">Message associated with the failure which is returned by the device specific driver.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceFailureException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceFailureException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="deviceUniqueName">Unique name of the device.</param>
            <param name="deviceMessage">Message associated with the failure which is returned by the device specific driver.</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceFailureException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceFailureException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceFailureException.DeviceUniqueName">
            <summary>
            Gets the name of the device failed
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.DeviceFailureException.DeviceMessage">
            <summary>
            Gets the message associated with the failure which is returned by the device specific driver
            </summary> 
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceNotConnectedException">
            <summary>
            DeviceNotConnectedException is thrown when error occurred during making connection to device.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotConnectedException.#ctor">
            <summary>
            Initializes a new instance of DeviceNotConnectedException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotConnectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DeviceNotConnectedException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotConnectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceNotConnectedException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceNotConnectedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotConnectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">
            <summary>
            DeviceNotFoundException is thrown when the required device is not found.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of DeviceNotFoundException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DeviceNotFoundException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DeviceNotFoundException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.DeviceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException">
            <summary>
            ConfigurationLoadingException is thrown when error scan device gateway loading.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException.#ctor">
            <summary>
            Initializes a new instance of ScanDeviceGatewayLoadingException
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of ScanDeviceGatewayLoadingException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of ScanDeviceGatewayLoadingException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanDeviceGatewayFailedEventArgs">
            <summary>
            Provides methods to initialize and manipulate instances of ScanDeviceGatewayFailedEventArgs
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceGatewayFailedEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initalize ScanDeviceGatewayFailedEventArgs
            </summary>
            <param name="message">Message associated with the failure</param>
            <param name="deviceClass">Device class  which is failed</param>
            <param name="innerException">Inner exception associated with the failure</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceGatewayFailedEventArgs.InnerException">
            <summary>
            Gets the inner exception associated with the failure. 
            This is there only if failure exception could be caught by the framework.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceGatewayFailedEventArgs.Message">
            <summary>
            Gets the message associated with the failure
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceGatewayFailedEventArgs.DeviceClass">
            <summary>
            Gets the device class  which is failed.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.HatchShape">
            <summary>
            HatchShape will pass the information of hatched shapes from the UI level to the ScanDocument level
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.#ctor">
            <summary>
            Initailize a new instance of HatchShape
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternLine(System.Single,Cti.Hardware.ScanDevice.Base.HatchLineBorderGapDirection,System.Single,System.Single,System.Single,System.Single,Cti.Hardware.ScanDevice.Base.HatchLineStyle,System.Boolean,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with straight lines
            </summary>
            <param name="borderGap">Distance measured from shape to the border of the hatch</param>
            <param name="borderGapDirection"> whether the border gap is set to inside the shape or outside</param>
            <param name="lineGap">gap between hatch lines</param>
            <param name="lineAngle">angle of hatch lines</param>
            <param name="baseX">X position of the starting point of the hatch</param>
            <param name="baseY">Y position of the starting point of the hatch</param>
            <param name="hatchStyle">HatchLineStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchLineStyle"/></param>
            <param name="withOffset">Setting this true will draw a border of the hatch</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternOffsetFilling(System.Single,Cti.Hardware.ScanDevice.Base.HatchOffsetStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles with even spaces
            </summary>
            <param name="offsetGap">Gap between two hatch lines</param>
            <param name="style">HatchOffsetStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternOffsetInOut(System.Single,System.Int32,System.Single,System.Int32,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles 
            </summary>
            <param name="insideOffsetGap">Gap between hatch lines which is drawn inside the shape</param>
            <param name="insideOffsetCount">Number of hatch lines drawn inside the shape</param>
            <param name="outsideOffsetGap">Gap between hatch lines which is drawn outside the shape</param>
            <param name="outsideOffsetCount">Number of hatch lines drawn outside the shape</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternHelixFilling(System.Single,Cti.Hardware.ScanDevice.Base.HelixStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with helix pattern
            </summary>
            <param name="helixGap">pitch of the helix</param>
            <param name="style">Style of the Helix <see cref="T:Cti.Hardware.ScanDevice.Base.HelixStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternLine(System.Single,Cti.Hardware.ScanDevice.Base.HatchLineBorderGapDirection,System.Single,System.Single,System.Single,System.Single,Cti.Hardware.ScanDevice.Base.HatchLineStyle,System.Boolean,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle,System.Boolean)">
            <summary>
            The hatched part would be filled with straight lines
            </summary>
            <param name="borderGap">Distance measured from shape to the border of the hatch</param>
            <param name="borderGapDirection"> whether the border gap is set to inside the shape or outside</param>
            <param name="lineGap">gap between hatch lines</param>
            <param name="lineAngle">angle of hatch lines</param>
            <param name="baseX">X position of the starting point of the hatch</param>
            <param name="baseY">Y position of the starting point of the hatch</param>
            <param name="hatchStyle">HatchLineStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchLineStyle"/></param>
            <param name="withOffset">Setting this true will draw a border of the hatch</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
            <param name="applySmoothing">Apply Smoothness when creating hatch</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternOffsetFilling(System.Single,Cti.Hardware.ScanDevice.Base.HatchOffsetStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle,System.Boolean)">
            <summary>
            The hatched part would be filled with circles with even spaces
            </summary>
            <param name="offsetGap">Gap between two hatch lines</param>
            <param name="style">HatchOffsetStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
            <param name="applySmoothing">Apply Smoothness when creating hatch</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternOffsetInOut(System.Single,System.Int32,System.Single,System.Int32,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle,System.Boolean)">
            <summary>
            The hatched part would be filled with circles 
            </summary>
            <param name="insideOffsetGap">Gap between hatch lines which is drawn inside the shape</param>
            <param name="insideOffsetCount">Number of hatch lines drawn inside the shape</param>
            <param name="outsideOffsetGap">Gap between hatch lines which is drawn outside the shape</param>
            <param name="outsideOffsetCount">Number of hatch lines drawn outside the shape</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
            <param name="applySmoothing">Apply Smoothness when creating hatch</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPatternHelixFilling(System.Single,Cti.Hardware.ScanDevice.Base.HelixStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle,System.Boolean)">
            <summary>
            The hatched part would be filled with helix pattern
            </summary>
            <param name="helixGap">pitch of the helix</param>
            <param name="style">Style of the Helix <see cref="T:Cti.Hardware.ScanDevice.Base.HelixStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
            <param name="applySmoothing">Apply Smoothness when creating hatch</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddHatchPattern(Cti.Hardware.ScanDevice.Base.HatchPattern)">
            <summary>
            The hatched part will be filled with the specified hatch pattern
            </summary>
            <param name="hatchPattern">Hatch pattern to be added</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line as a boundary shape for the hatch shape
            </summary>
            <param name="startX">X coordinate of the start point</param>
            <param name="startY">Y coordinate of the start point </param>
            <param name="startZ">Z coordinate of the start point</param>
            <param name="endX">X coordinate of the end point</param>
            <param name="endY">Y coordinate of the end point</param>
            <param name="endZ">Z coordinate of the end point</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddLine2D(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line as a boundary shape for the hatch shape
            </summary>
            <param name="startX">X coordinate of the start point</param>
            <param name="startY">Y coordinate of the start point </param>
            <param name="endX">X coordinate of the end point</param>
            <param name="endY">Y coordinate of the end point</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddCircle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a circle as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddCircle2D(System.Single,System.Single,System.Single)">
            <summary>
            Adds a circle as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddCircle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a circle as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="radius">Radius of the circle</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddCircle2D(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a circle as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="radius">Radius of the circle</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="radius">Radius of the arc</param>
            <param name="startAngle">Start angle of the arc mesured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the centre point</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddArc2D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="radius">Radius of the arc</param>
            <param name="startAngle">Start angle of the arc mesured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the centre point</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="radius">Radius of the arc</param>
            <param name="startAngle">Start angle of the arc mesured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the centre point</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddArc2D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="radius">Radius of the arc</param>
            <param name="startAngle">Start angle of the arc mesured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the centre point</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipse(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipse2D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipse(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipse2D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipticalArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an elliptical arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
            <param name="startAngle">Start angle of the arc mesured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the center point</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipticalArc2D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an elliptical arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
            <param name="startAngle">Start angle of the arc mesured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the centre point</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipticalArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an elliptical arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
            <param name="startAngle">Start angle of the arc measured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the center point</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddEllipticalArc2D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an elliptical arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="majorAxisLength">Length of the major axis</param>
            <param name="majorAxisAngle">Direction angle of major axis</param>
            <param name="ratioMinorMajor">Ratio of minor axis length to major axis lenth</param>
            <param name="startAngle">Start angle of the arc mesured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the center point</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddRectangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a rectangle as a boundary shape for the hatch shape
            </summary>
            <param name="lowerLeftX">X coordinate of the lower left point</param>
            <param name="lowerLeftY">Y coordinate of the lower left point</param>
            <param name="upperRightX">X coordinate of the upper right point</param>
            <param name="upperRightY">Y coordinate of the upper right point</param>
            <param name="angle">Rotation angle of the rectangle measured from positive-X direction</param>
            <param name="elevation">Z coordinate of the rectangle shape</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddRectangle2D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a rectangle as a boundary shape for the hatch shape
            </summary>
            <param name="lowerLeftX">X coordinate of the lower left point</param>
            <param name="lowerLeftY">Y coordinate of the lower left point</param>
            <param name="upperRightX">X coordinate of the upper right point</param>
            <param name="upperRightY">Y coordinate of the upper right point</param>
            <param name="angle">Rotation angle of the rectangle measured from positive-X direction</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddPolyline(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Adds a polyline as a boundary shape for the hatch shape
            </summary>
            <param name="vertices">List of points which describes the polyline</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddPolygon(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Adds a polygon as a boundary shape for the hatch shape
            </summary>
            <param name="vertices">List of points which describes the polygon</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddDeg3Bezier(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Adds a degree three Bezier as a boundary shape for the hatch shape
            </summary>
            <param name="vertices">List of points which describes the polygon</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.HatchShape.AddDeg3Bezier(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D},System.Single)">
            <summary>
            Adds a degree three Bezier as a boundary shape for the hatch shape
            </summary>
            <param name="vertices">List of points which describes the polygon</param>
            <param name="maximumSegmentationError">segmentation error of the circle</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.HatchShape.HatchPatternList">
            <summary>
            Gets the list of HatchPatterns binded to the HatchShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.HatchShape.BoundaryShapeList">
            <summary>
            Gets the list of boundary shapes
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanDeviceConfiguration">
            <summary>
            Used to encapsulate properties of a ScanDeviceConfiguration. This is used only for internal purposes. SM API developer does not need to use this class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceConfiguration.#ctor">
            <summary>
            Initialize a new instance of ScanDeviceConfiguration
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceConfiguration.ScanDeviceManagerConfigurations">
            <summary>
            Get or sets the ScanDeviceManagerConfigurations
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceConfiguration.HardwareConfigurationPath">
            <summary>
            Gets or sets Hardware configuration path
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceConfiguration.EnableEC1000">
            <summary>
            Gets or sets a value indicating whether EC1000 is enabled.
            </summary>
            <value>
              <c>true</c> if EC1000 is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceConfiguration.EnableSC500">
            <summary>
            Gets or sets a value indicating whether SC500 is enabled.
            </summary>
            <value>
              <c>true</c> if SC500 is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceConfiguration.EnableLightningII">
            <summary>
            Gets or sets a value indicating whether LightningII is enabled.
            </summary>
            <value>
              <c>true</c> if LightningII is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceConfiguration.EnableSMC">
            <summary>
            Gets or sets a value indicating whether SMC is enabled.
            </summary>
            <value>
              <c>true</c> if SMC is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanDeviceManager">
            <summary>
            <see cref="T:Cti.Hardware.ScanDevice.ScanDeviceManager"/> Class is the main entry point for accessing scanning devices. Application should create
            only one instance of this. 
            <para>
            <see cref="T:Cti.Hardware.ScanDevice.ScanDeviceManager"/> is responsible for detecting devices, connecting to devices, scanning, status monitoring, etc.
            </para>
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.LoadConfiguration(System.IO.TextReader)">
            <summary>
            Loads the configuration and try to load each hardware manager.
            </summary>
            <param name="configurationXmlStream">Stream which has the xml</param>
            <exception cref="T:Cti.Hardware.ScanDevice.ConfigurationLoadingException">If stream is not properly formatted</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException">If type could not be loaded</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.LoadConfiguration(System.String)">
            <summary>
            Loads the configuration and try to load each hardware manager.
            </summary>
            <param name="configurationFileName">Xml configuration file path</param>
            <exception cref="T:Cti.Hardware.ScanDevice.ConfigurationLoadingException">If stream is not properly formatted</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException">If type could not be loaded</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.LoadConfiguration">
            <summary>
            Loads the configuration and try to load each hardware manager.
            </summary>
            <exception cref="T:Cti.Hardware.ScanDevice.ConfigurationLoadingException">If stream is not properly formatted</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.ScanDeviceGatewayLoadingException">If type could not be loaded</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.InitializeHardware">
            <summary>
            Initialize the device
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.Connect(System.String)">
            <summary>
            Connects with the device. This method will be blocked until connection is established or failed.
            </summary>
            <param name="deviceUniqueName">Friendly name of the device to be connected</param>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device with the given name is not found</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException">Thrown when the device is already connected to another client</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException">Thrown when communication with the device is failed</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceFailureException">Thrown when the device failed to connect due to unknown reason</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.Attach(System.String)">
            <summary>
            Attaches to a device. This method will be blocked until connection is established or failed.
            </summary>
            <param name="deviceUniqueName">Friendly name of the device to be attached</param>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device with the given name is not found</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException">Thrown when the device is already connected to another client</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceCommunicationFailureException">Thrown when communication with the device is failed</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceFailureException">Thrown when the device failed to connect due to unknown reason</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.Disconnect(System.String)">
            <summary>
            Disconnects the device
            </summary>
            <param name="deviceUniqueName">Friendly name of the device to be disconnected</param>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device with the given name is not found</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceFailureException">Thrown when the device failed to disconnect due to unknown reason</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.Detach(System.String)">
            <summary>
            Detaches the device
            </summary>
            <param name="deviceUniqueName">Friendly name of the device to be disconnected</param>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device with the given name is not found</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceFailureException">Thrown when the device failed to disconnect due to unknown reason</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.GetDeviceList">
            <summary>
            Gets the currently available device list as a array of device names
            </summary>
            <returns>Returns the list of devices detected</returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.GetDeviceFriendlyName(System.String)">
            <summary>
            Gets the device friendly name for the given device
            </summary>
            <param name="deviceUniqueName">Device unique name of the device to find device class name</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.GetDeviceClass(System.String)">
            <summary>
            Gets the device class name for the given device
            </summary>
            <param name="deviceUniqueName">Friendly name of the device to find device class name</param>
            <returns>Returns the device class name</returns>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device is not found</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.Close">
            <summary>
            Closes the ScanDeviceManager, Disconnects the all connections made to devices and clean up the resources used
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.CreateScanDocument(System.String,Cti.Hardware.ScanDevice.Base.DistanceUnit)">
            <summary>
            Creates an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> binded with the given device
            </summary>
            <param name="deviceUniqueName">Friendly name of the device</param>
            <param name="distanceUnits">Mesuring units</param>
            <returns>Returns an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/></returns>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device is not found</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException">Thrown when the device is already in use</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.CreateScanDocument(System.String,System.Byte[])">
            <summary>
            Creates an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> binded with the given device.
            The <paramref name="storedDocumentData"/> can be from a device specific job file OR device independent job file OR ScanMaster Designer generated job file.
            Depending on the type of the file the resulting <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/>.DataType wil be changed.
            </summary>
            <param name="deviceUniqueName">Friendly name of the device</param>
            <param name="storedDocumentData">A device independant .sdw file saved with emmbedded scanning information or .lsj file, loaded as a byte array.</param>
            <returns>Returns an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/></returns>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device is not found</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceAlreadyInUseException">Thrown when the device is already in use</exception>
            <exception cref="T:Cti.Hardware.ScanDevice.StoredDocumentDataIncompatibleException">Thrown when the stored document data passed are not compatible with the target device</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.CreateScanDocumentOffline(Cti.Hardware.ScanDevice.Base.DistanceUnit)">
            <summary>
            Creates an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> which is not bound to any device type (Device independent ScanDocument).
            This <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> is a offline document which will have limited capability
            </summary>
            <returns>Returns an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/></returns>		
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.CreateScanDocumentOffline(System.String,Cti.Hardware.ScanDevice.Base.DistanceUnit)">
            <summary>
            Creates an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> binded with the given device class. 
            This <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/> is a offline document which will have limited capability
            </summary>
            <param name="deviceClassName">Name of the device class</param>
            <param name="distanceUnits">Mesuring units</param>
            <returns>Returns an instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDocument"/></returns>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException">Thrown when the device is not found</exception>		
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceClassNotFoundException">Thrown when the device class is not found</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.ShowDevicePropertyPages(System.String)">
            <summary>
            Used to show the property pages of the device
            </summary>
            <param name="deviceUniqueName">Unique name of the device for which the property pages to be shown</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.ShowDeviceInformation(System.String)">
            <summary>
            Used to show the information of the device
            </summary>
            <param name="deviceUniqueName">Unique name of the device for which the property pages to be shown</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.GetDeviceStatusSnapshot(System.String)">
            <summary>
            This method will create a <see cref="T:Cti.Hardware.ScanDevice.DeviceStatusSnapshot"/> object for the given device name.
            It will carry the current status of the specified device. However the same object will not 
            get updated when the device status changed. 
            <para>Host application is notified when the device status changed through</para> 
            </summary>
            <param name="deviceUniqueName"></param>
            <returns>Returns a snapshot of the current device status.
            Returns null if device not found or if the device has not </returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.ClearInterlock(System.String,System.String)">
            <summary>
            Clears specified interlock
            </summary>
            <param name="deviceUniqueName">Device unique name of the device</param>
            <param name="interlockName">Name of the interlock to be cleared</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.GetDeviceConfigurationData(System.String)">
            <summary>
            Gets the <see cref="T:Cti.Hardware.ScanDevice.Base.DeviceConfigurationData"/> of the given device, This method is used to get the
            device X, Y and Z factors
            </summary>
            <param name="deviceUniqueName"></param>
            <returns>Returns the DeviceConFigurationData</returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.GetStoredScanDocumentList(System.String)">
            <summary>
            Returns a list of scan documents stored on the specified device
            </summary>
            <param name="deviceUniqueName">Device name</param>
            <returns>List of scan documents stored on the specified device</returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.DeleteStoredScanDocument(System.String,Cti.Hardware.ScanDevice.Base.StoredScanDocumentEntry)">
            <summary>
            Deletes the stored scan document from the specified device
            </summary>
            <param name="deviceUniqueName">Device Name</param>
            <param name="scanDocumentEntry">Scan document entry to delete</param>
            <exception cref="T:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException">Thrown when deleting scan document failed</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.RenameStoredScanDocument(System.String,Cti.Hardware.ScanDevice.Base.StoredScanDocumentEntry,System.String)">
            <summary>
            Renames the stored scan document file
            </summary>
            <param name="deviceUniqueName">Device Name</param>
            <param name="scanDocumentEntry">Scan document entry to rename</param>
            <param name="newJobName">New name of the file</param>
            <exception cref="T:Cti.Hardware.ScanDevice.StoredScanDocumentOperationFailedException">Thrown when renaming scan document failed</exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.EnableFastIOMonitoring(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Enables fast IO monitering for the instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDeviceManager"/>
            </summary>
            <param name="deviceName">Device unique name of the device</param>
            <param name="pinName">Name of the pin in which fast IO monitering is enabled</param>
            <param name="raiseOnHigh">Trigger when pin is in highb state</param>
            <param name="raiseOnLow">Trigger when pin is in low state</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.UploadCorrectionFile(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Uploads the correction file for the instance of <see cref="T:Cti.Hardware.ScanDevice.ScanDeviceManager"/>.
            </summary>
            <param name="deviceName">Name of the device.</param>
            <param name="correctionTableFileData">The correction table file data in xml format.</param>
            <param name="correctionTableFileName">Name of the correction table file.</param>
            <param name="makeActive">if set to <c>true</c> to make correction file active.</param>
            <param name="correctionTableNumber">The correction table number.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:Cti.Hardware.ScanDevice.DeviceNotFoundException"></exception>
            <exception cref="T:Cti.Hardware.ScanDevice.CorrectionFileUploadFailedException"></exception>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.GetDeviceInternalInformation(System.String,System.String)">
            <summary>
            Do not delete this method. This is called through reflection to get license information
            </summary>
            <param name="deviceName">Device name</param>
            <param name="key">Key to find information</param>
            <returns>Returns the requested information as an object</returns>		
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.SetDeviceInternalInformation(System.String,System.String,System.Object)">
            <summary>
            Do not delete this method. This is called through reflection to set license information
            </summary>
            <param name="deviceName">Device name</param>
            <param name="key">Key to find information</param>
            <param name="info">Value to assign</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManager.#ctor">
            <summary>
            Initailize a new instance of ScanDeviceManager
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDeviceManager.DeviceListChanged">
            <summary>
            Occurs when device list changed.
            <para>After hardware managers are initialized, they starts discovering devices.
            When they discover a device or if discovered device is lost they will notify the host application through this event.</para>
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDeviceManager.DeviceStatusChanged">
            <summary>
            Occurs when status of any device is changed.
            <para>After the device is discovered, device driver continuously monitors the status of the device and 
            if there is any change in status it will notify the host application using this event.</para>
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDeviceManager.DeviceStatusChangedCom">
            <summary>
            Occurs when status of any device is changed.
            <para>After the device is discovered, device driver continuously monitors the status of the device and 
            if there is any change in status it will notify the host application using this event.</para>
            <para>This is same as event DeviceStatusChanged.
            This is supposed to be used in COM. .Net applications should always use DeviceStatusChanged</para>
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDeviceManager.DeviceInterlockTriggered">
            <summary>
            Occurs when interlock of any device is tripped. For this to happen device should be configured propoerly.
            </summary>
        </member>
        <member name="E:Cti.Hardware.ScanDevice.ScanDeviceManager.ScanDeviceGatewayFailed">
            <summary>
            Occurs when any of the hardware managers failed.
            <para>If any of the device driver fails, this event is fired. At the same time the driver
             will be automatically get unloaded.</para>
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManager.DeviceClasses">
            <summary>
            Gets the DeviceClasses
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManager.StatusRefreshInterval">
            <summary>
            Gets or sets the status refreshing interval in milliseconds. 
            HardwareMonitor will automatically query and updates the status for each discovered device.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManager.EnabledStatusCategories">
            <summary>
            Gets or sets which status categories will be monitored by the HardwareController
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration">
            <summary>
            Provides methods to initialize and manipulate instances of ScanDeviceManagerConfiguration. This is used only for internal purposes. SM API developer does not need to use this class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.#ctor">
            <summary>
            Initailaize a new instance of ScanDeviceManagerConfiguration
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.FriendlyName">
            <summary>
            Gets or sets the friendly name of the device
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.DLLName">
            <summary>
            Gets or sets the name of the device driver dll
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.NamespaceName">
            <summary>
            Gets or sets the name of the namespace of device driver dll 
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.ClassName">
            <summary>
            Gets or sets the class name of the device driver
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.EC1000Configuration">
            <summary>
            Gets the EC1000 configuration used for ScanDeviceManager.
            </summary> 
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.SC500Configuration">
            <summary>
            Gets the SC500 configuration used for ScanDeviceManager.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.LightningIIConfiguration">
            <summary>
            Gets the LightningII configuration used for ScanDeviceManager.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.ScanDeviceManagerConfiguration.SMCConfiguration">
            <summary>
            Gets the SMC configuration used for ScanDeviceManager.
            </summary>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.VectorImage">
            <summary>
            VectorImage holds vectors and their laser properties for marking.
            <para>
            VectorImage is created using ScanDocument by specifying its units. Once created it is bound to that ScanDocument 
            thus should not be reused with a different ScanDocument.</para>
            <para>
            VectorImage behaves as a state machine. Before adding any vectors, their laser properties should be set. Then all the vectors added 
            will use the current laser properties.</para>
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddScannableObject(Cti.Hardware.ScanDevice.Base.IScannable)">
            <summary>
            Adds a scannable object to the vector image
            </summary>
            <param name="scannableObject">scannable object to be added</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicTextShape(Cti.Hardware.ScanDevice.DynamicTextShape)">
            <summary>
            Adds a DynamicTextShape to the vector image
            </summary>
            <param name="shape">DynamicTextShape to be added</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicBarcodeShape(Cti.Hardware.ScanDevice.LinearBarcodeShape,System.String)">
            <summary>
            Adds a dynamic barcode shape to the VectorImage
            </summary>
            <param name="linearBarcodeShape">Linear barcode shape defines all the necessary info about barcode</param>
            <param name="variableName">Variable name of the barcode instance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicBarcodeShape(Cti.Hardware.ScanDevice.DataMatrixBarcodeShape,System.String)">
            <summary>
            Adds a dynamic barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">DataMatrix shape defines all the necessary info about DataMatrix</param>
            <param name="variableName">Variable name of the barcode instance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicBarcodeShape(Cti.Hardware.ScanDevice.QRCodeBarcodeShape,System.String)">
            <summary>
            Adds a dynamic barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">QR code barcode shape defines all the necessary info about QR code barcode</param>
            <param name="variableName">Variable name of the barcode object instance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicBarcodeShape(Cti.Hardware.ScanDevice.MicroQRCodeBarcodeShape,System.String)">
            <summary>
            Adds a dynamic barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">MicroQrcode barcode shape defines all the necessary info about MicroQrcode barcode</param>
            <param name="variableName">Variable name of the barcode object instance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicBarcodeShape(Cti.Hardware.ScanDevice.PdfBarcodeShape,System.String)">
            <summary>
            Adds a dynamic barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">Pdf417 barcode shape defines all the necessary info about Pdf417 barcode</param>
            <param name="variableName">Variable name of the barcode object instance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicBarcodeShape(Cti.Hardware.ScanDevice.MacroPdfBarcodeShape,System.String)">
            <summary>
            Adds a dynamic barcode shape to the VectorImage
            </summary>
            <param name="barcodeShape">MacroPdf417 barcode shape defines all the necessary info about MacroPdf417 barcode</param>
            <param name="variableName">Variable name of the barcode object instance</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicArcTextShape(Cti.Hardware.ScanDevice.DynamicArcTextShape)">
            <summary>
            Adds a DynamicArcTextShape to the vector image
            </summary>
            <param name="shape">Which has all necessary information to describe a DynamicArcTextShape</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.AddDynamicRasterImageShape(Cti.Hardware.ScanDevice.RasterImageShape)">
            <summary>
            Adds a DynamicRasterImageShape to the vector image
            </summary>
            <param name="shape">Which has all necessary information to describe a DynamicRasterImageShape</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.GetTotalCycleTime">
            <summary>
            Estimates the cycle time in seconds for the VectorImage. 
            </summary>
            <returns>Cycle time in seconds</returns>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetLaserPowerPercentage(System.Single)">
            <summary>
            Sets the laser marking power as a percentage for the marking
            </summary>
            <param name="laserPowerPercentage">Marking power for the document or selected shapes</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetMarkSpeed(System.Single)">
            <summary>
            Sets the laser speed for the marking
            </summary>
            <param name="markingSpeed">Marking speed for the document or selected shapes</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetJumpSpeed(System.Single)">
            <summary>
            Sets the laser Jump Speed for the marking
            </summary>
            <param name="jumpSpeed">Marking jump speed for the document or selected shapes</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetJumpDelay(System.Int32)">
            <summary>
            Sets the Jump Delay for the marking
            </summary>
            <param name="jumpDelay">Jump Delay for the marking in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetLaserOnDelay(System.Int32)">
            <summary>
            Sets the Laser On Delay for the marking
            </summary>
            <param name="laserOnDelay">Laser on Delay for the marking in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetLaserOffDelay(System.Int32)">
            <summary>
            Sets the Laser Off Delay for the marking
            </summary>
            <param name="laserOffDelay">Laser off Delay for the marking in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetMarkDelay(System.Int32)">
            <summary>
            Sets the Mark Delay for the marking
            </summary>
            <param name="markDelay">Mark Delay for the marking in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetPolyDelay(System.Int32)">
            <summary>
            Sets the PolyDelay for the marking
            </summary>
            <param name="polyDelay">Poly Delay for the marking in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetRepeatCount(System.Int32)">
            <summary>
            Sets the number of repetitions for the marking
            </summary>
            <param name="repeatCount">number of repetitions for the marking</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetPipelineDelay(System.Int32)">
            <summary>
            Sets the PipeLineDelay for the marking
            </summary>
            <param name="pipelineDelay">Pipeline Delay for the marking in micro seconds</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.EnableWobble(System.Single,System.Single)">
            <summary>
            Enables the wobble function for the vector image.
            </summary>
            <param name="wobbleOverlapPercentage">area overlap percentage of wobble with another wobble circle</param>
            <param name="wobbleThickness">amplitude of the circular wobble movement</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.DisableWobble">
            <summary>
            Disables the wobble function for the vector image.
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetModulationFrequency(System.Single)">
            <summary>
            Sets the modulation frequency in kHz
            </summary>
            <param name="frequency">Modulation frequency in kHz</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetChannelOneDutyCycle(System.Single)">
            <summary>
            Sets the modulation duty cycle for the Channel One as a percentage
            </summary>
            <param name="dutyCycle">Modulation duty cycle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetChannelTwoDutyCycle(System.Single)">
            <summary>
            Sets the modulation duty cycle for the Channel Two as a percentage
            </summary>
            <param name="dutyCycle">Modulation duty cycle</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetPulseWaveform(System.Int32)">
            <summary>
            Pulse wave form selection is used in SPI lasers only to control the laser power output.
            </summary>
            <param name="waveformNumber">Wave form number to select</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetVelocityCompensationMode(Cti.Hardware.ScanDevice.Base.VelocityCompensationMode,System.Single,System.Single)">
            <summary>
            Sets the Velocity compensation parameters for the marking
            </summary>
            <param name="velocityCompensationMode"></param>
            <param name="limit"></param>
            <param name="aggressiveness"></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetMaxRadialError(System.Single)">
            <summary>
            Sets the max radial error for the marking
            </summary>
            <param name="maxRadialError">Max radial error for the marking</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetBreakAngle(System.Single)">
            <summary>
            Sets the break angle for the marking
            </summary>
            <param name="breakAngle">Break Angle for the marking</param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.VectorImage.SetLaserPropertyVariable(System.String)">
            <summary>
            Sets a laser variable for marking.
            </summary>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.VectorImage.DistanceUnit">
            <summary>
            Gets the distance unit type of the <see cref="T:Cti.Hardware.ScanDevice.VectorImage"/>.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.VectorImage.VariablePolyDelayEnabled">
            <summary>
            Gets or sets the value indicating whether the applying of variable PolyDelay
            If false same poly delay is applied to all scanning segments.
            If true the PolyDelay value is adjusted proportional to the angular change in the next segment of the poly-vector.
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.VectorImage.IsStreamed">
            <summary>
            Gets or sets a value indicating whether the vector image is streamed.
            </summary>
            <value>
            <c>true</c> if this vector image is streamed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cti.Hardware.ScanDevice.TextShape">
            <summary>
            Provides methods to initialize and manipulate instances of TextShape
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TextShape.#ctor">
            <summary>
            Initializes a new instance of TextShape
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TextShape.AddHatchPatternLine(System.Single,Cti.Hardware.ScanDevice.Base.HatchLineBorderGapDirection,System.Single,System.Single,System.Single,System.Single,Cti.Hardware.ScanDevice.Base.HatchLineStyle,System.Boolean,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with straight lines
            </summary>
            <param name="borderGap">Distance mesureed from shape to the border of the hatch</param>
            <param name="borderGapDirection"> whether the border gap is set to inside the shape or outside</param>
            <param name="lineGap">gap between hatch lines</param>
            <param name="lineAngle">angle of hatch lines</param>
            <param name="baseX">X position of the starting point of the hatch</param>
            <param name="baseY">Y position of the starting point of the hatch</param>
            <param name="hatchStyle">HatchLineStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchLineStyle"/></param>
            <param name="withOffset">Setting this true will includes the border of the hatch</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TextShape.AddHatchPatternOffsetFilling(System.Single,Cti.Hardware.ScanDevice.Base.HatchOffsetStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles with even spaces
            </summary>
            <param name="offsetGap">Gap between two hatch lines</param>
            <param name="style">HatchOffsetStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TextShape.AddHatchPatternOffsetInOut(System.Single,System.Int32,System.Single,System.Int32,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles 
            </summary>
            <param name="insideOffsetGap">Gap between hatch lines which is drawn inside the shape</param>
            <param name="insideOffsetCount">Number of hatch lines drawn inside the shape</param>
            <param name="outsideOffsetGap">Gap between hatch lines which is drawn outside the shape</param>
            <param name="outsideOffsetCount">Number of hatch lines drawn outside the shape</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TextShape.AddHatchPatternHelixFilling(System.Single,Cti.Hardware.ScanDevice.Base.HelixStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with helix pattern
            </summary>
            <param name="helixGap">pitch of the helix</param>
            <param name="style">Style of the Helix <see cref="T:Cti.Hardware.ScanDevice.Base.HelixStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TextShape.ClearHatchPatterns">
            <summary>
            Clears all the hatch patterns added to the <see cref="T:Cti.Hardware.ScanDevice.TextShape"/>
            </summary>
        </member>
        <member name="M:Cti.Hardware.ScanDevice.TextShape.AddText(System.String,System.String,System.Drawing.FontStyle,System.Single,System.Single)">
            <summary>
            Adds the text with the given font properties
            </summary>
            <param name="text">Text to be added</param>
            <param name="fontName">Font face name if True Type font or full file path if .ovf font</param>
            <param name="fontStyle">FontStyle to be applied</param>
            <param name="height">Height of the text</param>
            <param name="gap">Inter character gap</param>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.Location">
            <summary>
            Gets or sets the location of the dot
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.DotDurationMicroseconds">
            <summary>
            Gets or sets the dot duration in microseconds
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.Angle">
            <summary>
            Get or sets the Angle of the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.ItalicAngle">
            <summary>
            Get or sets the ItalicAngle of the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.ScaleX">
            <summary>
            Get or sets the X scale for the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.ScaleY">
            <summary>
            Get or sets the Y scale for the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.Kerning">
            <summary>
            Get or set the kerning property of text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.WordWrap">
            <summary>
            Get or set the WordWrap property of text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.TextBoxWidth">
            <summary>
            Get or sets the width of the TextBox 
            (TextBox is the bounding box where the text is palced and alignment is discribe with respect to this TextBox)
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.TextBoxHeight">
            <summary>
            Get or sets the height of the TextBox 
            (TextBox is the bounding box where the text is palced and alignment is discribe with respect to this TextBox)
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.LineSpace">
            <summary>
            Get or sets the LineSpace of the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.LineSpaceStyle">
            <summary>
            Get or sets the line space style of the text shape <see cref="T:Cti.Hardware.ScanDevice.TextLineSpaceStyle"/>
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.HorizontalAlign">
            <summary>
            Get or sets the horizontal alignment of the text
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.VerticalAlign">
            <summary>
            Get or sets the vertical alignment of the text
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.Characters">
            <summary>
            Gets the charater list of the text
            </summary>
        </member>
        <member name="P:Cti.Hardware.ScanDevice.TextShape.HatchPatternList">
            <summary>
            Gets the hatch pattern list of the text.
            </summary>
        </member>
    </members>
</doc>
