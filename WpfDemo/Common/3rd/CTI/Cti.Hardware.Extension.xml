<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cti.Hardware.Extension</name>
    </assembly>
    <members>
        <member name="T:Cti.Hardware.Extension.Algorithm.AlignedBoundingBox">
            <summary>
            Provides methods to initialize and manipulate instances of AlignedBoundingBox
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.AlignedBoundingBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Algorithm.AlignedBoundingBox"/> class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Algorithm.AlignedBoundingBox.Location">
            <summary>
            Gets or sets the location of bounding box.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Algorithm.AlignedBoundingBox.Width">
            <summary>
            Gets or sets the width of bounding box.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Algorithm.AlignedBoundingBox.Height">
            <summary>
            Gets or sets the height of bounding box.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Algorithm.AlignedBoundingBox.Angle">
            <summary>
            Gets or sets the angle of bounding box.
            </summary>
            <value>
            The angle.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper">
            <summary>
            Facilitates bounding box calculation for API shapes. The calculated bounding boxes will be aligned to
            shape direction when appropriate. 
            <para>In order to use this class a separate license has to be obtained.</para>
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.DynamicTextShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of DynamicTextShape
            </summary>
            <param name="textShape">TextShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.DynamicArcTextShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of DynamicArcTextShape
            </summary>
            <param name="arcTextShape">DynamicArcTextShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.TextShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of TextShape
            </summary>
            <param name="textShape">TextShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.LinearBarcodeShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of LinearBarcodeShape
            </summary>
            <param name="barcodeShape">LinearBarcodeShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.DataMatrixBarcodeShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of DataMatrixBarcodeShape
            </summary>
            <param name="barcodeShape">DataMatrixBarcodeShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.QRCodeBarcodeShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of QRCodeBarcodeShape
            </summary>
            <param name="barcodeShape">QRCodeBarcodeShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.HatchShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of HatchShape
            </summary>
            <param name="hatchShape">HatchShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.SpiralShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of SpiralShape
            </summary>
            <param name="spiralShape">SpiralShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetBoundingBox(Cti.Hardware.ScanDevice.ArcShape,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of ArcShape
            </summary>
            <param name="arcShape">ArcShape to find the bounding box</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetCircleBoundingBox(System.Single,System.Single,System.Single,System.Single,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
             Gets the bounding box of a circle (represented by its geometric parameters)
            </summary>
            <param name="centerX">The x coordinate of the center</param>
            <param name="centerY">The y coordinate of the center</param>
            <param name="centerZ">The z coordinate of the center</param>
            <param name="radius">The radius of the circle</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.BoundingBoxHelper.GetEllipticalArcBoundingBox(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Cti.Hardware.Extension.Algorithm.AlignedBoundingBox)">
            <summary>
            Gets the bounding box of a Elliptical Arc (represented by its geometric parameters)
            </summary>
            <param name="centerX">The x coordinate of the center</param>
            <param name="centerY">The y coordinate of the center</param>
            <param name="centerZ">The z coordinate of the center</param>
            <param name="majorAxisLength">The length of the major axis</param>
            <param name="majorAxisAngle">Angle(measured in radian)  of the Major axis,Measured relative to x direction CCW</param>
            <param name="ratioMinorMajor">Ratio, major axis length to minor axis length</param>
            <param name="startAngle"> This angle(measured in radian)  is relative to the axis angle direction and measured in CCW direction</param>
            <param name="sweepAngle">SweepAngle(measured in radian)  of the Arc measured in radians</param>
            <param name="boundingBox">AlignedBoundingBox which upodates with the bounding box information.</param>
            <returns>True if a bounding box was able to find, otherwise false. </returns>
        </member>
        <member name="T:Cti.Hardware.Extension.Algorithm.HatchPatternExtensions">
            <summary>
            Contains extension methods of HatchPattern Class
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.HatchPatternExtensions.Clone(Cti.Hardware.ScanDevice.Base.HatchPattern)">
            <summary>
            Clones the specified hatch pattern.
            </summary>
            <param name="hatchPattern">The hatch pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.HatchPatternExtensions.IsPatternEqual(Cti.Hardware.ScanDevice.Base.HatchPattern,Cti.Hardware.ScanDevice.Base.HatchPattern)">
            <summary>
            Determines whether the specified hatch pattern is equal to the hatch pattern to compare.
            </summary>
            <param name="hatchPattern">The hatch pattern.</param>
            <param name="hatchPatternToCompare">The hatch pattern to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.HatchPatternExtensions.Scale(Cti.Hardware.ScanDevice.Base.HatchPattern,System.Single)">
            <summary>
            Scales the specified hatch pattern.
            </summary>
            <param name="hatchPattern">The hatch pattern.</param>
            <param name="scaleFactor">The scale factor.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.HatchPatternExtensions.Serialize(Cti.Hardware.ScanDevice.Base.HatchPattern,System.IO.BinaryWriter,System.Single)">
            <summary>
            Serializes the specified hatch pattern.
            </summary>
            <param name="hatchPattern">The hatch pattern.</param>
            <param name="writer">The writer.</param>
            <param name="serializeVersion">The serialize version.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.HatchPatternExtensions.Deserialize(Cti.Hardware.ScanDevice.Base.HatchPattern,System.IO.BinaryReader,System.Single)">
            <summary>
            Deserializes the specified hatch pattern.
            </summary>
            <param name="hatchPattern">The hatch pattern.</param>
            <param name="reader">The reader.</param>
            <param name="serializeVersion">The serialize version.</param>
        </member>
        <member name="T:Cti.Hardware.Extension.Algorithm.OvfWriter">
            <summary>
            Writing a OVF font file for the given range of TTF font
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.OvfWriter.#ctor">
            <summary>
            Initializes a new instance of the OvfWriter class.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Algorithm.Point3DExtensions">
            <summary>
            Contains extension methods of Point3D Class
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Copy(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single,System.Single)">
            <summary>
            Copy the x,y and z coordinates to destinationPoint.
            </summary>
            <param name="destinationPoint"></param>
            <param name="x">X coordinate of the point</param>
            <param name="y">Y coordinate of the point</param>
            <param name="z">Z coordinate of the point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Copy(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Copy the x,y and z coordinates same as the given point.
            </summary>
            <param name="destinationPoint"></param>
            <param name="sourcePoint">The point to get the coordinates</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Clone(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Creates and returns a new point having X,Y,Z coordinates as same as the given point.
            </summary>
            <param name="point">point to copy</param>
            <returns>Cloned Point3D</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Move(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single,System.Single)">
            <summary>
            Moves the point by given offset
            </summary>
            <param name="point">point to move</param>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Rotate(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single,System.Single)">
            <summary>
            Rotates the point relative to the reference point by the given angle. 
            </summary>
            <param name="point">point to rotate</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Rotate(Cti.Hardware.ScanDevice.Base.Point3D,System.Single)">
            <summary>
            Rotates the point by the given angle in counter clockwise direction.
            (0,0) will be taken as the reference point.
            </summary>
            <param name="point">point to rotate</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Scale(Cti.Hardware.ScanDevice.Base.Point3D,System.Single)">
            <summary>
            Scales the X and Y coordinates by the given value.
            </summary>
            <param name="point">point to scale</param>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.DistanceTo(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the distance from startPoint to  the endPoint.
            </summary>
            <param name="startPoint">Point from which the distance is calculated</param>
            <param name="endPoint">Point to which the distance is calculated</param>
            <returns>Distance from startPoint to  the endPoint</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.DistanceTo(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single)">
            <summary>
            Returns the distance from this to the given point
            </summary>
            <param name="startPoint">Point from which the distance is calculated</param>
            <param name="x">X Coordinate of the point to which distance is calculated</param>
            <param name="y">Y Coordinate of the point to which distance is calculated</param>
            <returns>Distance from this to the given point</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.EqualXYZ(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns true if the given point has the same X, Y and Z coordinates
            </summary>
            <param name="point">point to check equality</param>
            <param name="pointToCompare">Point with which the equality is checked.</param>
            <returns>True if this point coincides with the given point, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.EqualXYZ(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the given x and y values are the same X and Y coordinates of this
            </summary>
            <param name="point">point to check equality</param>
            <param name="x">X coordinate value to be checked.</param>
            <param name="y">Y coordinate value to be checked.</param>
            <param name="z">Z coordinate value to be checked.</param>
            <returns>True if equals, else false.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.EqualXY(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single)">
            <summary>
            Returns true if the given x and y values are the same X and Y coordinates of this
            </summary>
            <param name="point">point to check equality</param>
            <param name="x">X coordinate value to be checked.</param>
            <param name="y">Y coordinate value to be checked.</param>
            <returns>True if equals, else false.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.DirectionAngleTo(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the angle value of the direction from this to the given point.
            </summary>
            <param name="startPoint">Point from which the direction angle is calculated</param>
            <param name="endPoint">Point in the direction to be calculated</param>
            <returns>The angle value of the direction from this to the given point</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.DirectionAngleTo(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single)">
            <summary>
            Returns the angle value of the direction from this to the given point.
            </summary>
            <param name="startPoint">Point from which the direction angle is calculated</param>
            <param name="x">X coordinate of the point in the direction to be calculated</param>
            <param name="y">Y coordinate of the point in the direction to be calculated</param>
            <returns>The angle value of the direction from this to the given point given in radians</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.ToPointF(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns a PointF structure having the same coordinates
            </summary>
            <param name="point">point to convert</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.ToPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns a Point structure having the same coordinates
            </summary>
            <param name="point">point to convert</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Transform(Cti.Hardware.ScanDevice.Base.Point3D,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Transforms the point as it is multiplied by the given matrix.
            </summary>
            <param name="point">point to transform</param>
            <param name="matrix">Matrix to be multiplied</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Transform(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transforms the point as it is multiplied by the given matrix.
            </summary>
            <param name="point">point to transform</param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="xShift"></param>
            <param name="yShift"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Serialize(Cti.Hardware.ScanDevice.Base.Point3D,System.IO.BinaryWriter)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="point3D">point to serialize</param>
            <param name="writer">Used to write as binary</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.Point3DExtensions.Deserialize(Cti.Hardware.ScanDevice.Base.Point3D,System.IO.BinaryReader)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="point3D">point to deserialize</param>
            <param name="reader">Used to read primitive data types from the stream</param>
        </member>
        <member name="T:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper">
            <summary>
            Facilitates exploding to primitive shapes for API shapes.
            <para>In order to use this class a separate license has to be obtained.</para>
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeTextShape(Cti.Hardware.ScanDevice.TextShape,System.Single)">
            <summary>
            Explodes a TextShape to a collection of primitive shapes.
            </summary>
            <param name="textShape">A TextShape to be exploded.</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeTextShapeToCharacters(Cti.Hardware.ScanDevice.TextShape,System.Single)">
            <summary>
            Explodes a TextShape to a collection of primitive shapes based on individual character.
            </summary>
            <param name="textShape">A TextShape to be exploded.</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeTextShape(Cti.Hardware.ScanDevice.DynamicTextShape,System.Single)">
            <summary>
            Explodes a DynamicTextShape to a collection of primitive shapes.
            </summary>
            <param name="dynamicTextShape">A DynamicTextShape to be exploded.</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeTextShape(Cti.Hardware.ScanDevice.DynamicArcTextShape,System.Single)">
            <summary>
            Explodes a DynamicArcTextShape to a collection of primitive shapes.
            </summary>
            <param name="dynamicArcTextShape">A DynamicArcTextShape to be exploded.</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeBarcodeShape(Cti.Hardware.ScanDevice.LinearBarcodeShape)">
            <summary>
            Explodes a BarcodeShape to a collection of primitive shapes.
            </summary>
            <param name="barcodeShape">A LinearBarcodeShape to be exploded.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeBarcodeShape(Cti.Hardware.ScanDevice.DataMatrixBarcodeShape)">
            <summary>
            Explodes a DataMatrixBarcodeShape to a collection of primitive shapes.
            </summary>
            <param name="barcodeShape">A DataMatrixBarcodeShape to be exploded.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeBarcodeShape(Cti.Hardware.ScanDevice.QRCodeBarcodeShape)">
            <summary>
            Explodes a QRCodeBarcodeShape to a collection of primitive shapes.
            </summary>
            <param name="barcodeShape">A QRCodeBarcodeShape to be exploded.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeCircle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Explodes a Circle(defined by geometric parameters) to a collection of primitive shapes.
            </summary>
            <param name="centerX">The x coordinate of the center of the circle</param>
            <param name="centerY">The y coordinate of the center of the circle</param>
            <param name="centerZ">The z coordinate of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeArc(Cti.Hardware.ScanDevice.ArcShape,System.Single)">
            <summary>
            Explodes an Arc to a collection of primitive shapes
            </summary>
            <param name="arc">An Arc to be exploded</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Explodes an Arc(defined by geometric parameters) to a collection of primitive shapes
            </summary>
            <param name="centerX">The x coordinate of the center of the arc</param>
            <param name="centerY">The y coordinate of the center of the arc</param>
            <param name="centerZ">The z coordinate of the center of the arc</param>
            <param name="radius">The radius of the arc</param>
            <param name="startAngle">The StartAngle(measured in radian) of the arc</param>
            <param name="sweepAngle">The SweepAngle(measured in radian)  of the arc, If this is positive arc is CCW if negative arc is CW </param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeEllipticalArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Explodes a EllipticalArc(defined by geometric parameters) to a collection of primitive shapes
            </summary>
            <param name="centerX">The x coordinate of the center</param>
            <param name="centerY">The y coordinate of the center</param>
            <param name="centerZ">The z coordinate of the center</param>
            <param name="majorAxisLength">The length of the major axis</param>
            <param name="majorAxisAngle">Angle(measured in radian)  of the Major axis,Measured relative to x direction CCW</param>
            <param name="ratioMinorMajor">Ratio, major axis length to minor axis length</param>
            <param name="startAngle"> This angle(measured in radian)  is relative to the axis angle direction and measured in CCW</param>
            <param name="sweepAngle">SweepAngle(measured in radian)  of the Arc</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeDeg3BezierPath(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D},System.Single)">
            <summary>
            Explodes a Deg3BezierPath to a collection of primitive shapes
            </summary>
            <param name="controlPoints">Point3D collection which defines the bezier path</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeHatchShape(Cti.Hardware.ScanDevice.HatchShape,System.Single)">
            <summary>
            Explodes a HatchShape to a collection of primitive shapes
            </summary>
            <param name="hatchShape">A HatchShape to be exploded</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExplodeHelper.ExplodeSpiralShape(Cti.Hardware.ScanDevice.SpiralShape,System.Single)">
            <summary>
            Explodes a SpiralShape to a collection of primitive shapes
            </summary>
            <param name="spiralShape">A SpiralShape to be exploded</param>
            <param name="maxSegmentationError">Maximum allowed error for segmenting.</param>
            <returns>Collection of primitive shapes resulted from exploding.</returns>
        </member>
        <member name="T:Cti.Hardware.Extension.Algorithm.ShapeExtensions">
            <summary>
            Contains extension methods of Shape Class
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Algorithm.ShapeExtensions.ToLayer(Gsi.Framework.Shapes.GsiLayer)">
            Modified by HLi, 04/26/2016
            SWSMD-113
            As requested by customer, add ToLayer help function
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.Action.MarkingOrderArrangingAction">
            <summary>
            Description of MarkingOrderArrangingAction.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.Action.IAction">
            <summary>
            Description of IAction.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.IAction.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the things which supports the action.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.IAction.Initialize(Cti.Hardware.Extension.Controls.CanvasControl)">
            <summary>
            Used to initialize the acton.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.IAction.MouseMove(Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs)">
            <summary>
            Handles mouse move event.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.IAction.MouseUp(Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs)">
            <summary>
            Handles mouse up event
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.IAction.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles key down event.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.IAction.Terminate">
            <summary>
            Terminates the action.When this is called It should terminate other actions initiated by this instance. 
            They will be removed in the ActionCompleted handling method by checking the terminated flag.
            </summary>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.Canvas.Action.IAction.ActionCompleted">
            <summary>
            Once the action is completed this delegate will be fired.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.Action.MoveToOriginAction">
            <summary>
            Description of MoveToOriginAction.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Ruler.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the ruler
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.BottomRuler.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the Bottom Ruler
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.CanvasControl">
            <summary>
            Description of Canvas.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.SelectionCompleted(System.Object,System.EventArgs)">
            <summary>
            This is attached to the ShapeGettingAction.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.InvalidateViewers">
            <summary>
            When any changes done to the ShapeDocument or its shapes,
            this method should be called. Then the viewrs show in canvas invalidate and update view correctly.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.AddToSelectedShapes(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Adds the shape to selected shapes only if the shape is a selectable shape(shape or layero f the shape not Nonselectable)
            </summary>
            <param name="shape">Shape to be added to selected shapes. Avoid adding duplicate shape to selected shapes</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.#ctor">
            <summary>
            Creates Canvas instance
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.SetTreeExplorer(Cti.Hardware.Extension.Controls.TreeExplorer)">
            <summary>
            Application can dynamically change the TreeExplorer.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.DeleteSelectedShapes">
            <summary>
            Deletes the selected shapes in the canvas.
            Calling this will not fireback the ShapesDeleted event.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.SelectShapes(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Selects the given shape list in the canvas. Canvas does not valildate the list against the document.
            Application has to make sure that the shapes are in the document. Calling this will not fireback the 
            ShapesSelected event.
            </summary>
            <param name="shapeList">Shapes to be selected</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ConvertShapeDocumentToUnit(Cti.Hardware.ScanDevice.Base.DistanceUnit,Cti.Hardware.ScanDevice.Base.DistanceUnit)">
            <summary>
            Converts and update shapedocumnet unit.
            </summary>
            <param name="previousDistanceUnit"></param>
            <param name="currentDistanceUnit"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.GroupSelectedShapes">
            <summary>
            Group the selected shapes in the canvas.
            Calling this will not fireback the ShapesAdded event.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ZoomIn">
            <summary>
            Zooms in the view reference to the center of the view.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ZoomOut">
            <summary>
            Zooms out the view with reference to the center of the view.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.UpdateViewport(System.Single,System.Single,System.Single)">
            <summary>
            Updates the viewport with the given center and zoom.
            </summary>
            <param name="viewOriginX">Center point X coordinate of the view</param>
            <param name="viewOriginY">Center point Y coordinate of the view</param>
            <param name="zoomFactor">Zoom factor of the view</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.UpdateDrawing">
            <summary>
            When any changes done to the ShapeDocument or its shapes from outside,
            this method should be called. Then the drawing can reflect those changes.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.DistanceToPixel(System.Single)">
            <summary>
            Converts and returns the pixel distance corresponding to the real distance provided.
            Should not be used to convert a point in to pixel.
            </summary>
            <param name="realDistance">Real distance to be converted</param>
            <returns>Returns pixel distance</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.DistanceToReal(System.Single)">
            <summary>
            Converts and returns the real distance corresponding to the pixel distance provided.
            Should use properly. Should not be used to convert a point in to real.
            </summary>
            <param name="pixelDistance">Pixel distance to be converted</param>
            <returns>Returns real distance</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ToPixel(System.Single,System.Single,System.Single)">
            <summary>
            Converts and returns the point in pixels corresponding to the given real coordinates.
            Should not be used to convert a distance.
            </summary>
            <param name="realX">Real X coordinate of the point</param>
            <param name="realY">Real Y coordinate of the point</param>
            <param name="realZ">Real Z coordinate of the point</param>
            <returns>Point3D having pixel coordinates</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ToReal(System.Single,System.Single,System.Single)">
            <summary>
            Converts and returns the point in real corresponding to the given pixel coordinates.
            Should not be used to convert a distance.
            </summary>
            <param name="pixelX">Pixel X coordinate of the point </param>
            <param name="pixelY">Pixel Y coordinate of the point</param>
            <param name="pixelZ">Pixel Z coordinate of the point</param>
            <returns>Point3D having real coordinates</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.StartPanning">
            <summary>
            Starts panning action.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.StartMoveShapesToOrigin">
            <summary>
            Starts MoveToOrigin action.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.StartMarkingOrderChange">
            <summary>
            Starts MarkingOrderChange action.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ScaleShapes(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single)">
            <summary>
            Scales the given shape list with the given scale factor.
            </summary>
            <param name="shapeList">Shape list to scale</param>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.MoveShapes(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single,System.Single,System.Single)">
            <summary>
            Moves the given shape list with the given x, y and z offsets.
            </summary>
            <param name="shapeList">Shape list to move</param>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.RotateShapes(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single,System.Single,System.Single)">
            <summary>
            Rotates the given shape list with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="shapeList">Shape list to rotate</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.RotateShapes(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single)">
            <summary>
            Rotates the given shape list with the given angle. Angle should be in radians.
            </summary>
            <param name="shapeList">Shape list to rotate</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ClearSelectedShapes">
            <summary>
            Clear selected shapes.
            Calling this will not fireback the ShapesSelected event.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.ClearAllActions">
            <summary>
            Remove the actions
            Terminate Current Action
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:Cti.Hardware.Extension.Controls.CanvasControl.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.CanvasControl.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.CanvasControl.ShapesDeleted">
            <summary>
            This will get fired when shapes are deleted in the Canvas.
            </summary>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.CanvasControl.ShapesSelected">
            <summary>
            Fires a selection happens. This will not get fired when shapes are selected for a particular action.It only fires for editing
            </summary>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.CanvasControl.ShapesAdded">
            <summary>
            This will get fired when new shapes are added to the Canvas
            </summary>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.CanvasControl.ContextMenuRequested">
            <summary>
            Fires before showing context menus. Application can append more menu items when this event occured
            </summary>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.CanvasControl.ShapePropertyChanged">
            <summary>
            Occurs during shape property change.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.Document">
            <summary>
            Gets or sets the ShapeDocument of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.GridSpace">
            <summary>
            Gets or sets the grid spacing.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.GridUpperBoundaryX">
            <summary>
             Gets or sets the x value of the upper boundary point of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.GridUpperBoundaryY">
            <summary>
             Gets or sets the y value of the upper boundary point of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.GridLowerBoundaryX">
            <summary>
             Gets or sets the x value of the lower boundary point of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.GridLowerBoundaryY">
            <summary>
             Gets or sets the y value of the lower boundary point of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.CanvasCursor">
            <summary>
             Gets or sets the cursor of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ViewOriginX">
            <summary>
             Gets the x value of the origin of the view area.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ViewOriginY">
            <summary>
             Gets the y value of the origin of the view area.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ZoomFactor">
            <summary>
             Gets the zoom factor of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.SelectionPixelDistance">
            <summary>
            Gets the pixel distance to use in shape selections
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ShowAxis">
            <summary>
            Gets or sets status of showing the axis.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.AxisColor">
            <summary>
            Gets or sets the color of the axis.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.CanvasBackgroundColor">
            <summary>
            Gets or sets the color of the Canvas Background.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.GridColor">
            <summary>
            Gets or sets the color of the Grid.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ShowRuler">
            <summary>
            Gets or sets status of showing the rulers. 
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.RulerColor">
            <summary>
            Gets or sets the color of the rulers.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.SelectedLayer">
            <summary>
            Gets or sets the selected layer.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.SelectedShapes">
            <summary>
            Gets the collection of the currently selected shapes.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ShowJumps">
            <summary>
            Gets or sets status of showing the jumps.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ShowMarkingDirection">
            <summary>
            Gets or sets status of showing the marking direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ClippingRectangleTop">
            <summary>
            Gets real top coordinate of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ClippingRectangleBottom">
            <summary>
            Gets real bottom coordinate of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ClippingRectangleLeft">
            <summary>
            Gets real left coordinate of the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.CanvasControl.ClippingRectangleRight">
            <summary>
            Gets real right coordinate of the canvas.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.CanvasCursors">
            <summary>
            Provides cursors for the canvas
            </summary>	
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.CanvasCursorType">
            <summary>
            Specifies constants difining the cursor to show on the canvas
            </summary>	
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.CanvasDrawingTool">
            <summary>
            Description of CanvasDrawingTool.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw">
            <summary>
            Description of ICanvasDraw.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawLine(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Draws the line.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws line.
            </summary>
            <param name="startPointX">The start point x.</param>
            <param name="startPointY">The start point y.</param>
            <param name="endPointX">The end point x.</param>
            <param name="endPointY">The end point y.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawDot(System.Single,System.Single,System.Single)">
            <summary>
            Draws dot.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawPolyline(System.Collections.Generic.IList{Cti.Hardware.ScanDevice.Base.Point3D},System.Boolean)">
            <summary>
            Draws polyline.
            </summary>
            <param name="verticeList">The vertice list.</param>
            <param name="closed">if set to <c>true</c> [closed].</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Draws shape
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawShapes(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Draws provided shape list
            </summary>
            <param name="shapeList">The shape list.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawGroup(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Draws provided shape list
            </summary>
            <param name="shapeList">The shape list.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawArc(Cti.Hardware.Extension.Shapes.Arc)">
            <summary>
            Draws arc.
            </summary>
            <param name="arc">The arc shape to be drawn.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawCircle(Cti.Hardware.Extension.Shapes.Circle)">
            <summary>
            Draws circle.
            </summary>
            <param name="circle">The circle.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.SetColor(System.Drawing.Color)">
            <summary>
            Sets specified color.
            </summary>
            <param name="color">The color to be set.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawNonDashedFilledRectangle(System.Single,System.Single,System.Single,System.Single,System.Drawing.Brush,System.Drawing.Color)">
            <summary>
            Draws a non dashed filled rectangle.
            </summary>
            <param name="minX">The minimum x.</param>
            <param name="minY">The minimum y.</param>
            <param name="maxX">The maximum x.</param>
            <param name="maxY">The maximum y.</param>
            <param name="fillBrush">The fill brush.</param>
            <param name="boundaryColor">Color of the boundary.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawDashedFilledRectangle(System.Single,System.Single,System.Single,System.Single,System.Drawing.Brush,System.Drawing.Color)">
            <summary>
            Draws a dashed filled rectangle.
            </summary>
            <param name="minX">The minimum x.</param>
            <param name="minY">The minimum y.</param>
            <param name="maxX">The maximum x.</param>
            <param name="maxY">The maximum y.</param>
            <param name="fillBrush">The fill brush.</param>
            <param name="boundaryColor">Color of the boundary.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.EnableDashMode">
            <summary>
            Enables the dash mode.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DisableDashMode">
            <summary>
            Disables the dash mode.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawHotspot(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Drawing.Color)">
            <summary>
            Draws hotspot.
            </summary>
            <param name="point">The point.</param>
            <param name="hotspotSize">Size of the hotspot.</param>
            <param name="hotspotColor">Color of the hotspot.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawText(Cti.Hardware.Extension.Shapes.HorizontalText)">
            <summary>
            Draws text.
            </summary>
            <param name="text">The text shape to be drawn.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawQRCode(Cti.Hardware.Extension.Shapes.QRCodeBarcode)">
            <summary>
            Draws given qr code.
            </summary>
            <param name="qrcode">The qrcode shape to be drawn.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawDataMatrix(Cti.Hardware.Extension.Shapes.DataMatrixBarcode)">
            <summary>
            Draws given data matrix.
            </summary>
            <param name="dataMatrix">The data matrix shape to be drawn.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawLinearBarcode(Cti.Hardware.Extension.Shapes.LinearBarcode)">
            <summary>
            Draws given linear barcode.
            </summary>
            <param name="barcode">The barcode shape to be drawn.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.DrawHatch(Cti.Hardware.Extension.Shapes.Hatch)">
            <summary>
            Draws the hatch.
            </summary>
            <param name="hatch">The hatch shape to be drawn.</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw.HotspotRealSize">
            <summary>
            Gets the real size of the hotspot.
            </summary>
            <value>
            The real size of the hotspot.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasDrawingTool.CanvasBackgroundColor">
            <summary>
            Gets or sets the color of the Canvas Background.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasDrawingTool.GridColor">
            <summary>
            Gets or sets the color of the Grid.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs">
            <summary>
            Provides data for canvas mouse events
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs.Button">
            <summary>
            The mouse button pressed
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was clicked.
            </summary>	
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs.Delta">
            <summary>
            Gets the number of detents the mouse wheel has scrolled.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs.X">
            <summary>
            The x coordinates of real axis system represented by the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs.Y">
            <summary>
            The y coordinates of real axis system represented by the canvas.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CanvasMouseEventArgs.KeyModifiers">
            <summary>
            The keyboard key combination.
            </summary>	
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.CompositeIndex.#ctor">
            <summary>
            Instantiate a new instance of the CompositeIndex.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CompositeIndex.LayerIndex">
            <summary>
            getsor sets LayerIndex
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.CompositeIndex.ShapeIndex">
            <summary>
            Gets or sets ShapeIndex
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo">
            <summary>
            Description of ContextMenuItemInfo.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.PerformClick">
            <summary>
            Passes click event to ContextMenuItemInfo.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo"/> class.
            </summary>
            <param name="key">The unique key.</param>
            <param name="text">The display text of context menu.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.#ctor(System.String,System.String,System.EventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo"/> class.
            </summary>
            <param name="key">The unique key.</param>
            <param name="text">The display text of context menu.</param>
            <param name="onClick">The on click event handler.</param>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.Click">
            <summary>
            Occurs when user performs click event on context menu item info.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.Tag">
            <summary>
            Gets or sets the associated object.
            </summary>
            <value>
            The associated object.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.SubmenuItems">
            <summary>
            Gets the list of submenu items.
            </summary>
            <value>
            The list of submenu items.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.Image">
            <summary>
            Gets or sets the icon of context menu item info.
            </summary>
            <value>
            The image.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.Key">
            <summary>
            Gets or sets the unique key associated with ContextMenuItemInfo instance.
            </summary>
            <value>
            The unique key associated with ContextMenuItemInfo instance.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo.Text">
            <summary>
            Gets or sets the display text of context menu.
            </summary>
            <value>
            The display text of context menu.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs">
            <summary>
            Provides data for events related to ContextMenuItemInfo
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs.#ctor(System.Collections.Generic.IList{Cti.Hardware.Extension.Controls.Canvas.ContextMenuItemInfo},System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs"/> class.
            </summary>
            <param name="menuItems">The list of menu items.</param>
            <param name="control">The control to which the context menu is attached.</param>
            <param name="point">The relative location at which the context menu item is shown.</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs"/> is handled.
            </summary>
            <value>
              <c>true</c> if handled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs.Control">
            <summary>
            Gets the control to which the context menus are bound with.
            </summary>
            <value>
            The control.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs.Point">
            <summary>
            Gets the relative location at which the context menu should be shown.
            </summary>
            <value>
            The relative location at which the context menu should be shown.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ContextMenuRequestedEventArgs.Menus">
            <summary>
            Gets the list of menu items.
            </summary>
            <value>
            The list of menu items.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.FourStateTreeView">
            <summary>
            Description of FourStateTreeView.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.InvalidateViewLevels">
            <summary>
            Specifies constants defining level of invalidation need to happen on the canvas.
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Controls.Canvas.InvalidateViewLevels.ShapeLayers">
            <summary>
            Invalidates the shapes. Should try to avoid using since itrs expensive
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Controls.Canvas.InvalidateViewLevels.ActionLayers">
            <summary>
            Invalidates the actions only. If called, all the active actions will be redrawn
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.LeftRuler.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the Left Ruler
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.Action.MovingAction">
            <summary>
            Description of MoveAction.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.Action.PanningAction">
            <summary>
            Description of PanningAction.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.PanningAction.#ctor">
            <summary>
            Constructor for PanningAction
            </summary>	
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.RulerManager">
            <summary>
            Rulers are managed by this class. Canvas will have one 
            instance of this. This is exposed to host application to control how rulers are drawn
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.RulerManager.#ctor(Cti.Hardware.Extension.Controls.CanvasControl)">
            <summary>
            Summary of the class RulerManager
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.RulerManager.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the enabled rulers
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.RulerManager.RulerWidth">
            <summary>
            Gets the width of the ruler
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.RulerManager.ShowBottomRuler">
            <summary>
            Enables the bottom side ruler
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.RulerManager.ShowLeftRuler">
            <summary>
            Enables the left side ruler
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs">
            <summary>
            Provides data for events related to shapes (Like selection, adding, deleting, property changing)
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs.#ctor(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs"/> class.
            </summary>
            <param name="shape">The shape associated with ShapeEventArgs.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs.#ctor(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs"/> class.
            </summary>
            <param name="shapeList">The shape list associated with ShapeEventArgs.</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs.Layer">
            <summary>
            Returns the layer which is related to the action
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ShapeEventArgs.Shapes">
            <summary>
            Returns the List of shapes on which the action happened
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.Action.ShapeGettingAction">
            <summary>
            Description of ShapeGettingAction.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.Action.ShapeGettingAction.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles key down event.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.Action.ShapeGettingAction.ClickedPoint">
            <summary>
             Gets the clicked point when shape is selected by clicking on them
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.ShapeImageMapper">
            <summary>
            Mapping of shapeType to Image of the shape to show on treeExplorer
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ShapeImageMapper.#ctor(Cti.Hardware.Extension.Shapes.ShapeType,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ShapeImageMapper"/> struct.
            </summary>
            <param name="shapeType">The ShapeType.</param>
            <param name="image">The image for the shape type.</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ShapeImageMapper.ShapeType">
            <summary>
            Gets the ShapeType of the shape.
            </summary>
            <value>
            The type of the shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ShapeImageMapper.ShapeImage">
            <summary>
            Gets the image associated with ShapeType.
            </summary>
            <value>
            The image for shape type.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs">
            <summary>
            Provides data for events related to shape index changing
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs.#ctor(Cti.Hardware.Extension.Shapes.Layer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs"/> class.
            </summary>
            <param name="layer">The layer containing the shape.</param>
            <param name="beforeIndex">shape Index before change.</param>
            <param name="afterIndex">Shape index after change.</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs.BeforeIndex">
            <summary>
            Gets or sets the shape index before change.
            </summary>
            <value>
            The shape index before change.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs.AfterIndex">
            <summary>
            Gets or sets the shape index after change.
            </summary>
            <value>
            The shape index after change.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Controls.Canvas.ShapeIndexChangedEventArgs.Layer">
            <summary>
            Gets or sets the layer containing the shape.
            </summary>
            <value>
            The layer containing the shape.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.Canvas.ShowJumpViewer">
            <summary>
            Description of ShowJumpViewer.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Controls.TreeExplorer">
            <summary>
            Description of TreeExplorer.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.UpdateTree">
            <summary>
            To update shape tree from outside, this method should be called.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.ClearAll">
            <summary>
            To clear shape tree
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.#ctor">
            <summary>
            Creates TreeExplorer instance
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.SetShapeImages(System.Collections.Generic.IList{Cti.Hardware.Extension.Controls.Canvas.ShapeImageMapper})">
            <summary>
            Set Images of the shape introduced by the application.
            These images show on treeexplorer to represent the specific shape type.
            Only the ShapeIImageMapper's of custom shapes (shape introduce by the application) pass to to this method. 
            </summary>
            <param name="shapeImageMapList">List of ShapeImageMapper only for custom shapes</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.Initialize(Cti.Hardware.Extension.Controls.CanvasControl)">
            <summary>
            Initialize TreeExplorer
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.SetDocument(Cti.Hardware.Extension.Shapes.ShapeDocument)">
            <summary>
            Set shape document on treeexplorer
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.UpdateTreeWithMaintainingExpandedNodes">
            <summary>
            To update shape tree from outside while maintaining the selected node as it is, this method should be called.
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Controls.TreeExplorer.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Controls.TreeExplorer.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="E:Cti.Hardware.Extension.Controls.TreeExplorer.ShapesSelected">
            <summary>
            Fires a selection happens. This will not get fired when shapes are selected for a particular action.It only fires for editing
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Files.FileDocument">
            <summary>
            Used to encapsulate properties of a FileDocument. 
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Files.FileDocument.layers">
            Modified by HLi, 04/26/2016
            SWSMD-113
            As requested by customer, add layer information into FileDocument
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Files.FileDocument"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileDocument.GetBoundingRectangle(Cti.Hardware.ScanDevice.Base.Point3D@,Cti.Hardware.ScanDevice.Base.Point3D@)">
            <summary>
            Gets the bounding rectangle of shape document.
            </summary>
            <param name="lowerLeftPoint">The lower left point.</param>
            <param name="upperRightPoint">The upper right point.</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileDocument.GetScannableObject(System.Int32)">
            <summary>
            Gets the scannable object.
            </summary>
            <param name="dotDuration">Duration of the dot.</param>
            <returns>IScannable object</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileDocument.GetTransformedScannableObject(System.Drawing.Drawing2D.Matrix,System.Int32)">
            <summary>
            Gets the transformed scannable object.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="dotDuration">Duration of the dot.</param>
            <returns>IScannable object</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileDocument.GetTransformedScannableObject(Cti.Hardware.ScanDevice.Base.DistanceUnit,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>a
            Gets the transformed scnnable object.
            </summary>
            <param name="fitBoxUnit">The fit box unit.</param>
            <param name="fitBoxX">The fit box x.</param>
            <param name="fitBoxY">The fit box y.</param>
            <param name="fitBoxWidth">Width of the fit box.</param>
            <param name="fitBoxHeight">Height of the fit box.</param>
            <param name="dotDuration">Duration of the dot.</param>
            <returns>IScannable object</returns>
        </member>
        <member name="P:Cti.Hardware.Extension.Files.FileDocument.DistanceUnit">
            <summary>
            Gets or sets the distance unit of file document.
            </summary>
            <value>
            The distance unit.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Files.FileDocument.Shapes">
            <summary>
            Gets the shapes of file document.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Files.FileDocument.Layers">
            <summary>
            Gets the layers of file document.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Files.FileReader">
            <summary>
            Facilitates reading of dxf files for marking.
            <para>In order to use this class a separate license has to be obtained.</para>
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Files.FileReader"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileReader.Read(System.String)">
            <summary>
            Reads the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Resultant file document instance</returns>
            <exception cref="T:Cti.Hardware.Extension.License.LicenseException"></exception>
        </member>
        <member name="P:Cti.Hardware.Extension.Files.FileReader.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>
            The log which contains possible errors and other information.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Files.FileReadingException">
            <summary>
            FileReadingException is thrown when error occurred during dxf file reading.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileReadingException.#ctor">
            <summary>
            Initializes a new instance of FileReadingException
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileReadingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of FileReadingException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileReadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of FileReadingException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileReadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Files.FileReadingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Files.FileReadingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cti.Hardware.Extension.Files.ScannableFileDocument">
            <summary>
            Description of ScannableFileDocument.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.License.LicenseException">
            <summary>
            LicenseException is thrown when error occurred during licensing error
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseException.#ctor">
            <summary>
            Initializes a new instance of LicenseException
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of LicenseException
            </summary>
            <param name="message">Message to be send in the exception</param>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of LicenseException
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception which is the cause of the current exception</param>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.License.LicenseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Cti.Hardware.Extension.License.LicenseException.ActiveLicenseMode">
            <summary>
            Gets the currently active license mode
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.License.LicenseException.LicenseStatus">
            <summary>
            Gets the license status
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.License.LicenseException.LicenseStatusMessage">
            <summary>
            Gets the license status message
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.License.LicenseFeature">
            <summary>
            Defines the features to be licensed
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseFeature.DxfReadingApi">
            <summary>
            The LicenseFeature that allows DXF reading API
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseFeature.BoundingBoxHelper">
            <summary>
            The LicenseFeature that allows Bounding Box Helper functions
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseFeature.ShapeExplodeHelper">
            <summary>
            The LicenseFeature that allows Shape Explode Helper functionality
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseFeature.Canvas">
            <summary>
            The LicenseFeature that allows Canvas functions
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.License.LicenseManager">
            <summary>
            Provides license configuration facilities.
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseManager.scanDeviceManagerForLicense">
            <summary>
            Do not remove this variable. It is used in LicenseHelper using reflection
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseManager.IsFeatureEnabled(Cti.Hardware.Extension.License.LicenseFeature)">
            <summary>
            Gets whether the specified feature is licensed
            </summary>
            <param name="feature">Feature to check</param>
            <returns>Returns true if the feature is licensed</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseManager.EnableDeviceBasedLicense(Cti.Hardware.ScanDevice.ScanDeviceManager)">
            <summary>
            Enables the device based license mode. When this mode is used a application has to connect 
            with a device which has the license for required feature
            </summary>
            <param name="scanDeviceManager">ScanDeviceManager instance used in the application to 
            discover and connect with devices</param>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseManager.EnableDongleBasedLicense">
            <summary>
            Enables dongle based license. 
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseManager.EnableSoftwareLicense">
            <summary>
            Enables software based license. The license file "ScanMasterApi.lic" file should be in the same
            folder as Cti.Hardware.Extension.dll. 
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseManager.EnableEvaluationLicense">
            <summary>
            Enables evaluation license.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.License.LicenseManager.GetLicenseRequestCode">
            <summary>
            Generates the request code unique to the current machine which is required to obtain a license
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cti.Hardware.Extension.License.LicenseManager.LastLicenseCheckStatus">
            <summary>
            Gets the license status for the last license checking operation
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.License.LicenseManager.LastLicenseCheckStatusMessage">
            <summary>
            Gets the license status message for the last license checking operation
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.License.LicenseStatus">
            <summary>
            Defines status of the license
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.Valid">
            <summary>
            The valid license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.Evaluation">
            <summary>
            The evaluation license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.LicenseFileMissing">
            <summary>
            The license file missing license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.Expired">
            <summary>
            The expired license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.HardwareMismatch">
            <summary>
            The hardware mismatch license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.FileInvalid">
            <summary>
            The file invalid license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.GenericError">
            <summary>
            The generic error license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.DongleError">
            <summary>
            The dongle error license status
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.License.LicenseStatus.DeviceError">
            <summary>
            The device error license status
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.LocalizingResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.EndOrdering">
            <summary>
              Looks up a localized string similar to End Ordering.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.Error_Reflector_FailToFind0OfType1In2">
            <summary>
              Looks up a localized string similar to Fail to find {0} of type {1} in {2}..
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_CircleShape_CutterCompensationWidthInvalid">
            <summary>
              Looks up a localized string similar to Cutter Compensation Width is not a valid value.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_General_CouldNotFindFontFile">
            <summary>
              Looks up a localized string similar to Could not find font file.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_General_DynamicArcTextShapeFontNameCannotBeNull">
            <summary>
              Looks up a localized string similar to DynamicArcTextShape.FontName cannot be null.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_General_DynamicTextShapeFontNameCannotBeNull">
            <summary>
              Looks up a localized string similar to DynamicTextShape.FontName cannot be null.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_CouldNotFindAnyConnectedDevice">
            <summary>
              Looks up a localized string similar to Could not find any connected device having the license for the feature requested..
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_CouldNotFindLicenseFile">
            <summary>
              Looks up a localized string similar to Could not find license file &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_DaysEvaluationPeriodHasBeenEnded">
            <summary>
              Looks up a localized string similar to {0} days evaluation period has been ended.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_DongleIsNotAvailable">
            <summary>
              Looks up a localized string similar to Dongle is not available or the feature is not allowed.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_EvaluationLicenseFoundEvaluationWillExpireIn0Days">
            <summary>
              Looks up a localized string similar to Evaluation license found. Evaluation will expire in {0} days.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_FailedLoadingDongleDriver">
            <summary>
              Looks up a localized string similar to Failed loading dongle driver. Make sure that Hasp dongle driver is installed and the app.config file, the startup entry has &apos;useLegacyV2RuntimeActivationPolicy&apos; attribute set to &apos;true&apos;..
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_FailedToGetDeviceConnectionStatus">
            <summary>
              Looks up a localized string similar to Failed to get device connection status. Check ScanDeviceManager.EnabledStatusCategories value.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_FeatureNotEnabled">
            <summary>
              Looks up a localized string similar to Feature not enabled.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_GenericErrorOccurred">
            <summary>
              Looks up a localized string similar to Generic error occurred.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_InvalidLicenseFile">
            <summary>
              Looks up a localized string similar to Invalid License file.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_LicenseErrorOccured">
            <summary>
              Looks up a localized string similar to License error occurred.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_LicenseFileIsNotValid">
            <summary>
              Looks up a localized string similar to License file is not valid.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_LicenseIsNotValidForThisMachine">
            <summary>
              Looks up a localized string similar to License is not valid for this machine.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_UnknownLicenseModeFound">
            <summary>
              Looks up a localized string similar to Unknown license mode found.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_LicenseHelper_ValidLicenseFound">
            <summary>
              Looks up a localized string similar to Valid license found.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_Reflector_ObjCannotBeNull">
            <summary>
              Looks up a localized string similar to obj cannot be null..
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_ShapeExploderHelper_NumberOfControlPointsShouldBe13">
            <summary>
              Looks up a localized string similar to Number of control points should be {1 + 3 * Number of beziers}. Each connection point of two beziers are shared..
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ErrorMsg_ShapeExploderHelper_SweepAngleShouldBeWithin2PITo2PI">
            <summary>
              Looks up a localized string similar to Sweep angle should be within -2PI to +2PI.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ExceptionParameter_ShapeExploderHelper_ControlPoints">
            <summary>
              Looks up a localized string similar to controlPoints.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ExecptionParameter_ShapeExploderHelper_SweepAngle">
            <summary>
              Looks up a localized string similar to sweepAngle.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.LicenseManager_LicenseValid">
            <summary>
              Looks up a localized string similar to Valid.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.ReverseMarkingDirection">
            <summary>
              Looks up a localized string similar to Reverse Marking Direction.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.StartMarkingFromHere">
            <summary>
              Looks up a localized string similar to Start Marking From Here.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.TreeExplorer_ShapeListName">
            <summary>
              Looks up a localized string similar to Shape List [{0}, {1}].
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.LocalizingResources.TreeExplorer_ShapeListTreeNode">
            <summary>
              Looks up a localized string similar to Shape List.
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Misc.DocumentVersion.Version1000">
            <summary>
            Gets the version number corresponding to the first version.
            </summary>		
        </member>
        <member name="F:Cti.Hardware.Extension.Misc.DocumentVersion.Version2000">
            <summary>
            Gets the version number corresponding to the second version.
            </summary>		
        </member>
        <member name="F:Cti.Hardware.Extension.Misc.DocumentVersion.Version2001">
            <summary>
            Gets the version number corresponding to the third version.
            </summary>		
        </member>
        <member name="F:Cti.Hardware.Extension.Misc.DocumentVersion.Version3000">
            <summary>
            Gets the version number corresponding to the fourth version.
            </summary>		
        </member>
        <member name="P:Cti.Hardware.Extension.Misc.DocumentVersion.LatestVersion">
            <summary>
            Gets the latest version number
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.NonLocalizingResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.NonLocalizingResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.NonLocalizingResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.NonLocalizingResources.PanCursorDrag">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.NonLocalizingResources.PanCursorRelease">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.NonLocalizingResources.TreeExplorer_TagProjectRoot">
            <summary>
              Looks up a localized string similar to tagProjectRoot.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Arc">
            <summary>
            Description of Arc.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.ShapeBase">
            <summary>
            Used to encapsulate methods and properties of Shape Class
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.IBinarySerializable">
            <summary>
            Contains interface methods of IBinarySerializable class
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.IBinarySerializable.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the object as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.IBinarySerializable.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the object from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.ShapeBase"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Copy(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>     
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the shape as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeBase.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeBase.ShapeType">
            <summary>
            Gets the type of the shape.
            </summary>
            <value>
            The type of the shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeBase.Markable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Shapes.ShapeBase"/> is markable.
            </summary>
            <value>
              <c>true</c> if markable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeBase.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Shapes.ShapeBase"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeBase.Color">
            <summary>
            Gets or sets the color of the shape.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeBase.CustomizedProperties">
            <summary>
            Gets the customized properties of the shape.
            </summary>
            <value>
            The customized properties.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeBase.ShapeTypeName">
            <summary>
            Name of the ShapeType.
            This name shows in the TreeExplorer, etc.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.Arc"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Arc.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Arc.CenterPoint">
            <summary>
            Gets or sets the center point of arc shape.
            </summary>
            <value>
            The center point of arc shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle of arc shape.
            </summary>
            <value>
            The start angle of arc shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Arc.SweepAngle">
            <summary>
            Gets or sets the sweep angle of arc shape.
            </summary>
            <value>
            The sweep angle of arc shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Arc.Radius">
            <summary>
            Gets or sets the radius of arc shape.
            </summary>
            <value>
            The radius of arc shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Arc.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
            <value>
            The shape type of the shape.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.BoundingBox">
            <summary>
            Used to encapsulate methods and properties of BoundingBox Class
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.BoundingBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.BoundingBox"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.BoundingBox.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Rectangle which will go through the given x and y values
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="y1"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.BoundingBox.#ctor(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Creates a Rectangle with the given lower left and upper right points.
            Note that Rectangle will not keep references to the passed points. It will
            just copy the coordinates from them.
            </summary>
            <param name="lowerLeft">Lower left point of the rectangle</param>
            <param name="upperRight">Upper right point of the rectangle</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.BoundingBox.Equals(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks for equality of the location and size of the given rectangle 
            </summary>
            <param name="minimumX"></param>
            <param name="minimumY"></param>
            <param name="maximumX"></param>
            <param name="maximumY"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.BoundingBox.Equals(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Checks for equality of the location and size of the given rectangle 
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.BoundingBox.PointIsInside(System.Single,System.Single)">
            <summary>
            Returns true if the given point is inside this rectangle
            </summary>
            <param name="x">X coordinate of the point to be check</param>
            <param name="y">Y coordinate of the point to be check</param>
            <returns>Returns true if the point is inside</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.BoundingBox.CrossesLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Find line crosses
            </summary>
            <param name="x1">X of Start point of line to check</param>
            <param name="y1">Y of Start point of line to check</param>
            <param name="x2">X of End point of line to check</param>
            <param name="y2">AY of End point of line to check</param>
            <returns>Returns true if the given line crosses any of the edges of this rectangle</returns>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.BoundingBox.LowerLeftPoint">
            <summary>
            Gets or sets the lower left point of the bounding box.
            </summary>
            <value>
            The lower left point of the bounding box.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.BoundingBox.UpperRightPoint">
            <summary>
            Gets or sets the upper right point of the bounding box.
            </summary>
            <value>
            The upper right point of the bounding box.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.BoundingBox.Width">
            <summary>
            Gets the width of the bounding box
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.BoundingBox.Height">
            <summary>
            gets the height of the bounding box
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.BoundingBox.Center">
            <summary>
            Gets the center of the bounding box.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Circle">
            <summary>
            Used to encapsulate methods and properties of Circle.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.Circle"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.GenerateCutterCompensationResult">
            <summary>
            Generates the resultant circle after cutter compensation applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given      rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Circle.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Circle.CenterPoint">
            <summary>
            Gets or sets the Center point of the circle.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Circle.Radius">
            <summary>
            Gets or sets the radius of the circle.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Circle.CutterCompensationWidth">
            <summary>
            Gets or sets the cutter compensation width of the circle shape.
            </summary>
            <value>
            The cutter compensation width.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Circle.DirectionOfCutterCompensation">
            <summary>
            Gets or sets the cutter compensation direction.
            </summary>
            <value>
            The cutter compensation direction.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Circle.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.DataMatrixBarcode">
            <summary>
            Used to encapsulate methods and properties of DataMatrix barcode shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.DataMatrixBarcode"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Height">
            <summary>
            Gets or sets the height of DataMatrix barcode shape.
            </summary>
            <value>
            The height of DataMatrix barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Text">
            <summary>
            Gets or sets the text of DataMatrix barcode shape.
            </summary>
            <value>
            The text of DataMatrix barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of DataMatrix barcode shape.
            </summary>
            <value>
            The hatch pattern of DataMatrix barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Angle">
            <summary>
            Gets or sets the angle of DataMatrix barcode shape.
            </summary>
            <value>
            The angle of DataMatrix barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.InvertImage">
            <summary>
            Gets or sets a value indicating whether [invert image].
            </summary>
            <value>
              <c>true</c> if [invert image]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.Location">
            <summary>
            Gets or sets the location of DataMatrix barcode shape.
            </summary>
            <value>
            The location of DataMatrix barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.DataMatrixFormat">
            <summary>
            Gets or sets the data matrix format of DataMatrix barcode shape.
            </summary>
            <value>
            The data matrix format.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.DataMatrixSize">
            <summary>
            Gets or sets the size of the datamatrix.
            </summary>
            <value>
            The size of the data matrix.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.AutoExpand">
            <summary>
            Gets or sets a value indicating whether [automatic expand].
            </summary>
            <value>
              <c>true</c> if [automatic expand]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.FlipHorizontally">
            <summary>
            Gets or sets a value indicating whether [flip horizontally].
            </summary>
            <value>
              <c>true</c> if [flip horizontally]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.FlipVertically">
            <summary>
            Gets or sets a value indicating whether [flip vertically].
            </summary>
            <value>
              <c>true</c> if [flip vertically]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.QuietZone">
            <summary>
            Gets or sets a value indicating whether [quiet zone].
            </summary>
            <value>
              <c>true</c> if [quiet zone]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.MarkingOrder">
            <summary>
            Gets or sets the marking order of hatch and outline
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.DataMatrixBarcode.ShapeType">
            <summary>
            Gets the shape type of the datamatrix barcode shape.
            </summary>
            <value>
            The type of the shape.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Dot">
            <summary>
            Description of Dot.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>     
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Dot.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Dot.X">
            <summary>
            Gets or sets the x coordinate of dot shape.
            </summary>
            <value>
            The x coordinate of dot shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Dot.Y">
            <summary>
            Gets or sets the y coordinate of dot shape.
            </summary>
            <value>
            The y coordinate of dot shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Dot.Z">
            <summary>
            Gets or sets the z coordinate of dot shape.
            </summary>
            <value>
            The z coordinate of dot shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Dot.ShapeType">
            <summary>
            Gets the type of the shape of dot shape.
            </summary>
            <value>
            The type of the shape of dot shape.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Group">
            <summary>
            Description of Group.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.Group"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.AddShapes(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Adds the given shapes to the group
            </summary>
            <param name="shapes">Shapes to be added</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>     
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Group.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Group.ShapeList">
            <summary>
            Gets List of Shapes
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Group.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Hatch">
            <summary>
            Used to encapsulate methods and properties of Hatch.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.#ctor">
            <summary>
            Initialize a new instance of Hatch
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddHatchPattern(Cti.Hardware.ScanDevice.Base.HatchPattern)">
            <summary>
            Adds a hatch pattern
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddHatchPatternLine(System.Single,Cti.Hardware.ScanDevice.Base.HatchLineBorderGapDirection,System.Single,System.Single,System.Single,System.Single,Cti.Hardware.ScanDevice.Base.HatchLineStyle,System.Boolean,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with straight lines
            </summary>
            <param name="borderGap">Distance measured from shape to the border of the hatch</param>
            <param name="borderGapDirection"> whether the border gap is set to inside the shape or outside</param>
            <param name="lineGap">gap between hatch lines</param>
            <param name="lineAngle">angle of hatch lines</param>
            <param name="baseX">X position of the starting point of the hatch</param>
            <param name="baseY">Y position of the starting point of the hatch</param>
            <param name="hatchStyle">HatchLineStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchLineStyle"/></param>
            <param name="withOffset">Setting this true will draw a border of the hatch</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddHatchPatternOffsetFilling(System.Single,Cti.Hardware.ScanDevice.Base.HatchOffsetStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles with even spaces
            </summary>
            <param name="offsetGap">Gap between two hatch lines</param>
            <param name="style">HatchOffsetStyle of the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddHatchPatternOffsetInOut(System.Single,System.Int32,System.Single,System.Int32,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with circles 
            </summary>
            <param name="insideOffsetGap">Gap between hatch lines which is drawn inside the shape</param>
            <param name="insideOffsetCount">Number of hatch lines drawn inside the shape</param>
            <param name="outsideOffsetGap">Gap between hatch lines which is drawn outside the shape</param>
            <param name="outsideOffsetCount">Number of hatch lines drawn outside the shape</param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddHatchPatternHelixFilling(System.Single,Cti.Hardware.ScanDevice.Base.HelixStyle,Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm,Cti.Hardware.ScanDevice.Base.HatchCornerStyle)">
            <summary>
            The hatched part would be filled with helix pattern
            </summary>
            <param name="helixGap">pitch of the helix</param>
            <param name="style">Style of the Helix <see cref="T:Cti.Hardware.ScanDevice.Base.HelixStyle"/></param>
            <param name="algorithm">HatchOffsetAlgorithm which used to create the hatch<see cref="T:Cti.Hardware.ScanDevice.Base.HatchOffsetAlgorithm"/></param>
            <param name="cornerStyle">Corner style of the hatch <see cref="T:Cti.Hardware.ScanDevice.Base.HatchCornerStyle"/></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Adds a shape as a boundary shape for the hatch shape
            </summary>
            <param name="shape">Shape to add</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line as a boundary shape for the hatch shape
            </summary>
            <param name="startX">X coordinate of the start point</param>
            <param name="startY">Y coordinate of the start point </param>
            <param name="startZ">Z coordinate of the start point</param>
            <param name="endX">X coordinate of the end point</param>
            <param name="endY">Y coordinate of the end point</param>
            <param name="endZ">Z coordinate of the end point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddCircle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Ads a circle as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Ads an arc as a boundary shape for the hatch shape
            </summary>
            <param name="centerX">X coordinate of the center</param>
            <param name="centerY">Y coordinate of the center</param>
            <param name="centerZ">Z coordinate of the center</param>
            <param name="radius">Radius of the arc</param>
            <param name="startAngle">Start angle of the arc measured from positive-X direction</param>
            <param name="sweepAngle">The angle difference between end and start point in degrees with respect to the centre point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddRectangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a rectangle as a boundary shape for the hatch shape
            </summary>
            <param name="lowerLeftX">X coordinate of the lower left point</param>
            <param name="lowerLeftY">Y coordinate of the lower left point</param>
            <param name="upperRightX">X coordinate of the upper right point</param>
            <param name="upperRightY">Y coordinate of the upper right point</param>
            <param name="angle">Rotation angle of the rectangle measured from positive-X direction</param>
            <param name="elevation">Z coordinate of the rectangle shape</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.AddPolyline(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Adds a polyline as a boundary shape for the hatch shape
            </summary>
            <param name="vertices">List of points which describes the polyline</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>     
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around the reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.SerializePatternList(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serializes the hatch pattern list.
            </summary>
            <param name="writer">The writer.</param>
            <param name="serializeVersion">The serialize version.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Hatch.DeserializePatternList(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserializes the hatch pattern list.
            </summary>
            <param name="reader">The reader.</param>
            <param name="deserializeVersion">The deserialize version.</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Hatch.HatchPatternList">
            <summary>
            Gets the list of HatchPatterns binded to the Hatch
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Hatch.BoundaryShapeList">
            <summary>
            Gets the list of boundary shapes
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Hatch.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.IExtender">
            <summary>
            Use to hold interface member of IExtender
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Layer">
            <summary>
            Used to encapsulate methods and properties of Layer.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Layer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.Layer"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Layer.AddShapes(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Adds shapes to layer.
            </summary>
            <param name="shapes">The shape list to be added.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Layer.Copy(Cti.Hardware.Extension.Shapes.Layer)">
            <summary>
            Copies the property values from the source layer. ShapeList will not be copied.
            </summary>
            <param name="sourceLayer">Source layer from which properties are taken</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Layer.AddShapes(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Adds shape to layer.
            </summary>
            <param name="shape">The shape to be added.</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Layer.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Layer.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Layer.ShapeList">
            <summary>
            Gets the shape list.
            </summary>
            <value>
            The shape list.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Layer.Markable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Shapes.Layer"/> is markable.
            </summary>
            <value>
              <c>true</c> if markable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Layer.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Shapes.Layer"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Layer.LayerName">
            <summary>
            Gets or sets the name of the layer.
            </summary>	
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.LinearBarcode">
            <summary>
            Used to encapsulate methods and properties of LinearBarcode.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.#ctor">
            <summary>
            Initialize a new instance of LinearBarcodeShape
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.LinearBarcode.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.Location">
            <summary>
            Gets or sets the location of the LinearBarcodeShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.QuietZone">
            <summary>
            Gets or sets a value indicating whether [quiet zone].
            </summary>
            <value>
              <c>true</c> if [quiet zone]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.BarcodeType">
            <summary>
            Gets or sets the type of the barcode, e.g Codabar, Code128, etc..
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.Height">
            <summary>
            Gets or sets the height of the barcode
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.Width">
            <summary>
            Gets or sets the width of the barcode
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.PrintRatio">
            <summary>
            Gets or sets the print ratio of barcode
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.Text">
            <summary>
             Gets or sets the barcode text of the LinearBarcodeShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of barcode
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.Angle">
            <summary>
            Gets or sets the rotation angle of the LinearBarcodeShape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.InvertImage">
            <summary>
            Gets or sets a value indicating whether the LinearBarcodeShape is inverted
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.FlipHorizontally">
            <summary>
            Gets or sets the value indicating whether the LinearBarcodeShape is fliped in horizontal direction
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.FlipVertically">
            <summary>
            Gets or sets the value indicating whether the LinearBarcodeShape is fliped in vertical direction
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.MarkingOrder">
            <summary>
            Gets or sets the marking order of hatch and outline
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.LinearBarcode.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Line">
            <summary>
            Used to encapsulate methods and properties of Line.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.Line"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>     
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Line.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Line.StartPoint">
            <summary>
            Gets or sets the start point of line shape.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Line.EndPoint">
            <summary>
            Gets or sets the end point of line shape.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Line.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.Polyline">
            <summary>
            DUsed to encapsulate methods and properties of Polyline.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.Polyline"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.GenerateCutterCompensationResult">
            <summary>
            Generates the cutter compensation result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.Polyline.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Polyline.Vertices">
            <summary>
            Gets or sets the vertices of polyine shape.
            </summary>
            <value>
            The vertices of polyine shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Polyline.Closed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cti.Hardware.Extension.Shapes.Polyline"/> is closed.
            </summary>
            <value>
              <c>true</c> if closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Polyline.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Polyline.CutterCompensationWidth">
            <summary>
            Gets or sets the cutter compensation width.
            </summary>
            <value>
            The cutter compensation width.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.Polyline.DirectionOfCutterCompensation">
            <summary>
            Gets or sets the direction of cutter compensation.
            </summary>
            <value>
            The direction of cutter compensation.
            </value>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.QRCodeBarcode">
            <summary>
            Used to encapsulate methods and properties of QRCodeBarcode.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.QRCodeBarcode"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>`	
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Location">
            <summary>
            Gets or sets the location of QRCode barcode shape.
            </summary>
            <value>
            The location of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Height">
            <summary>
            Gets or sets the height of QRCode barcode shape.
            </summary>
            <value>
            The height of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Text">
            <summary>
            Gets or sets the text of QRCode barcode shape.
            </summary>
            <value>
            The text of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.HatchPattern">
            <summary>
            Gets or sets the hatch pattern of QRCode barcode shape.
            </summary>
            <value>
            The hatch pattern of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.Angle">
            <summary>
            Gets or sets the angle of QRCode barcode shape.
            </summary>
            <value>
            The angle of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.InvertImage">
            <summary>
            Gets or sets a value indicating whether [invert image].
            </summary>
            <value>
              <c>true</c> if [invert image]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.QuietZone">
            <summary>
            Gets or sets a value indicating whether [quiet zone].
            </summary>
            <value>
              <c>true</c> if [quiet zone]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.FlipHorizontally">
            <summary>
            Gets or sets a value indicating whether [flip horizontally].
            </summary>
            <value>
              <c>true</c> if [flip horizontally]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.FlipVertically">
            <summary>
            Gets or sets a value indicating whether [flip vertically].
            </summary>
            <value>
              <c>true</c> if [flip vertically]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.ErrorCorrectionLevel">
            <summary>
            Gets or sets the error correction level.
            </summary>
            <value>
            The error correction level.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.CodeSize">
            <summary>
            Gets or sets the code size of QRCode barcode shape.
            </summary>
            <value>
            The code size of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.EncodingMode">
            <summary>
            Gets or sets the encoding mode of QRCode barcode shape.
            </summary>
            <value>
            The encoding mode of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.MaskPattern">
            <summary>
            Gets or sets the mask pattern of QRCode barcode shape.
            </summary>
            <value>
            The mask pattern of QRCode barcode shape.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.AutoExpand">
            <summary>
            Gets or sets a value indicating whether [automatic expand].
            </summary>
            <value>
              <c>true</c> if [automatic expand]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.MarkingOrder">
            <summary>
            Gets or sets the marking order of hatch and outline
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.QRCodeBarcode.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.ShapeDocument">
            <summary>
            Used to encapsulate methods and properties of ShapeDocument.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.ShapeDocument"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeDocument.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeDocument.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeDocument.DistanceUnit">
            <summary>
            Gets or sets the Units of the document.
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.ShapeDocument.LayerList">
            <summary>
            Gets the List of layers.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.ShapeCreationFactory">
            <summary>
            Used to encapsulate methods and properties of ShapeCreationFactory.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.ShapeCreationFactory.CreateShape(Cti.Hardware.Extension.Shapes.ShapeType)">
            <summary>
            Creates the shape of shape type.
            </summary>
            <param name="shapeType">Type of the shape.</param>
            <returns></returns>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.ShapeType">
            <summary>
            Supported shape types
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.None">
            <summary>
            used to represent no shape
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.Dot">
            <summary>
            The dot shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.Line">
            <summary>
            The line shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.Arc">
            <summary>
            The arc shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.Circle">
            <summary>
            The circle shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.Polyline">
            <summary>
            The polyline shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.LinearBarcode">
            <summary>
            The linear barcode shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.DataMatrixBarcode">
            <summary>
            The data matrix barcode shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.QRCodeBarcode">
            <summary>
            The qr code barcode shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.Group">
            <summary>
            The group shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.Hatch">
            <summary>
            The hatch shape type
            </summary>
        </member>
        <member name="F:Cti.Hardware.Extension.Shapes.ShapeType.TextBox">
            <summary>
            The text box shape type
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Shapes.HorizontalText">
            <summary>
            Used to encapsulate methods and properties of HorizontalText.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.GetLoadedData">
            <summary>
            Returns CBN Buffer data related to the text shape which is already cached.
            If InvalidateLoadedData() is called, cached CBN data will be cleared thus this will recalculate CBN data.
            </summary>
            <returns>Returns the CBN buffer</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cti.Hardware.Extension.Shapes.HorizontalText"/> class.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.CopyShape(Cti.Hardware.Extension.Shapes.ShapeBase)">
            <summary>
            Copies the content from the given shape. There cannot be dependent references once copied.
            </summary>
            <param name="sourceShape">Source shape to copy from</param>     
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Clone">
            <summary>
            Returns a clone of the given shape.
            </summary>
            <returns>The cloned shape</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Move(System.Single,System.Single,System.Single)">
            <summary>
            Moves the shape with the given x, y and z offsets.
            </summary>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Rotate(System.Single)">
            <summary>
            Rotates the shape with the given angle. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the shape with the given angle around a reference point. Angle should be in radians.
            </summary>
            <param name="angle">Rotation angle in radians</param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Scale(System.Single)">
            <summary>
            Scales the shape with the given scale factor.
            </summary>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.CrossesRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Returns true if the rectangle crosses the shape.
            </summary>
            <param name="rect">The rectangle with which it finds the intersection</param>
            <returns>true if they intersects</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.InsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.CrossesOrInsideRectangle(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            returns true if the shape crosses or is inside the given rectangle
            </summary>
            <param name="rect">rectangle to be checked</param>
            <returns>true if shape crosses or is inside the rectangle</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.ShortestDistanceFromPoint(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance from the given point.
            If the distance cannot be calculated it will return -1;
            </summary>
            <param name="point">Point from which the distance is calculated</param>
            <returns>The shortest distance </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Draw(Cti.Hardware.Extension.Controls.Canvas.ICanvasDraw)">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Boundary(Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the shape
            </summary>
            <param name="shapeBoundary">Variable to update with the boundary</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Explode(System.Collections.Generic.IList{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Explodes the shape in to controller supported shape types
            </summary>
            <param name="explodedShapeList"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Serialize(System.IO.BinaryWriter,System.Single)">
            <summary>
            Serialize the Line as a byte stream using the BinaryWriter.
            </summary>
            <param name="writer">Used to write as binary</param>
            <param name="serializeVersion">Version of serializing object</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Shapes.HorizontalText.Deserialize(System.IO.BinaryReader,System.Single)">
            <summary>
            Deserialize the Line from a byte stream using the BinaryReader.
            </summary>
            <param name="reader">Used to read primitive data types from the stream</param>
            <param name="deserializeVersion">Version of deserialize object</param>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.Location">
            <summary>
            Gets or sets the location of text.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.DotDurationMicroseconds">
            <summary>
            Gets or sets the dot duration in microseconds
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.Angle">
            <summary>
            Get or sets the Angle of the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.ItalicAngle">
            <summary>
            Get or sets the ItalicAngle of the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.ScaleX">
            <summary>
            Get or sets the X scale for the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.ScaleY">
            <summary>
            Get or sets the Y scale for the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.Kerning">
            <summary>
            Get or set the kerning property of text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.WordWrap">
            <summary>
            Get or set the WordWrap property of text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.TextBoxWidth">
            <summary>
            Get or sets the width of the TextBox 
            (TextBox is the bounding box where the text is placed and alignment is describe with respect to this TextBox)
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.TextBoxHeight">
            <summary>
            Get or sets the height of the TextBox 
            (TextBox is the bounding box where the text is placed and alignment is describe with respect to this TextBox)
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.LineSpace">
            <summary>
            Get or sets the LineSpace of the text shape
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.LineSpaceStyle">
            <summary>
            Get or sets the line space style of the text shape <see cref="T:Cti.Hardware.ScanDevice.TextLineSpaceStyle"/>
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.HorizontalAlign">
            <summary>
            Get or sets the horizontal alignment of the text
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.VerticalAlign">
            <summary>
            Get or sets the vertical alignment of the text
            </summary>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.FontFaceName">
            <summary>
            Gets or sets the font face name.
            </summary>
            <value>
            The font face name
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.FontStyle">
            <summary>
            Gets or sets the font style of text.
            </summary>
            <value>
            The font style.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.Text">
            <summary>
            Gets or sets the text of text shape.
            </summary>
            <value>
            The text of the text shape
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.TextHeight">
            <summary>
            Gets or sets the height of the text.
            </summary>
            <value>
            The height of the text.
            </value>
        </member>
        <member name="P:Cti.Hardware.Extension.Shapes.HorizontalText.ShapeType">
            <summary>
            Gets the shape type of the shape.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Util.EllipseUtil">
            <summary>
            Description of EllipseUtil.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.EllipseUtil.FindPointOnEllipticalArc(System.Single,System.Single,System.Single,System.Single,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Find point on the elliptical arc according to the given angle on the arc
            </summary>
            <param name="angleToFindPoint"></param>
            <param name="axisAngle"></param>
            <param name="majorLength"></param>
            <param name="minorLength"></param>
            <param name="centerPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.EllipseUtil.FindPointOnCircularArc(System.Single,System.Single,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            find point on the elliptical arc accrding to the given angle on the arc
            </summary>
            <param name="angleToFindPoint"></param>
            <param name="radius"></param>
            <param name="centerPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.EllipseUtil.ParametricAngleOfPointOnEllipticalArc(Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Find Angle projected on Circle by given point on Elliptical Arc
            The point have to be rotate point by-AxisAngle of Arc with refernce to center and then move by -centerPoint of EllipticalArc
            EllipticalArc center point=(0,0) and AxisAngle=0
            </summary>
            <param name="pointOnEllipticalArc">rotated point by-AxisAngle of Arc with refernce to center and then move by -center</param>
            <returns></returns>
        </member>
        <member name="T:Cti.Hardware.Extension.Util.HatchUtil">
            <summary>
            Description of HatchUtil.
            </summary>
        </member>
        <member name="T:Cti.Hardware.Extension.Util.MathUtil">
            <summary>
            Contains common mathematical utility functions
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.FloatEq(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the a and b are within given tolerance
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.DoubleEq(System.Double,System.Double,System.Double)">
            <summary>
            Returns true if the a and b are within given tolerance
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.AngleEq(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the the two angles are within given tolerance
            </summary>
            <param name="angle1"></param>
            <param name="angle2"></param>
            <param name="tolerance"></param>
            <returns>Returns true if angles are within tolerance</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.AngleOnOrInsideRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the given theta is within the angles or on the limits. The range starts from startAngle and sweep is
            given by the sweepAngle. If sweepAngle is positive, direction is anti clockwise.
            </summary>
            <param name="theta">Angle to check for the range</param>
            <param name="startAngle">Starting of the range</param>
            <param name="sweepAngle">Sweep from the startAngle. If positive, anti clockwise. Otherwise clockwise </param> 
            <returns>Returns true is theta is within the range or on the limits</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.AngleInsideRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the given theta is within the angles. The range starts from startAngle and sweep is
            given by the sweepAngle. If sweepAngle is positive, direction is anti clockwise.
            </summary>
            <param name="theta">Angle to check for the range</param>
            <param name="startAngle">Starting of the range</param>
            <param name="sweepAngle">Sweep from the startAngle. If positive, anti clockwise. Otherwise clockwise </param> 
            <returns>Returns true is theta is within the range</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.ValueOnOrInsideRange(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the given value is within the range or on the boundary given
            </summary>
            <param name="valueToCheck">Value to check for within the range</param>
            <param name="value1">First value of the range</param>
            <param name="value2">Second value of the range</param>
            <returns>Returns true if the given value is within the given range or on the boundary </returns>		
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.GetAngleInMinusPIToPlusPI(System.Single)">
            <summary>
            Find the -PI To +PI angle  in float of the given angle
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.GetAngleInZeroTo2PI(System.Single)">
            <summary>
            Find the Zero To 2PI angle  inn float of the given angle
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.MathUtil.ConvertToDistanceUnit(Cti.Hardware.ScanDevice.Base.DistanceUnit,Cti.Hardware.ScanDevice.Base.DistanceUnit,System.Single)">
            <summary>
            Converts the value in source unit to destination unit.
            </summary>
            <param name="sourceUnit">The source unit.</param>
            <param name="destinationUnit">The destination unit.</param>
            <param name="valueToConvert">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Cti.Hardware.Extension.Util.PointUtil">
            <summary>
            Description of PointUtil.
            </summary>
            <summary>
            Contains utility methods required to work with points and point lists
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.CreateClone(System.Collections.Generic.IEnumerable{Cti.Hardware.ScanDevice.Base.Point3D})">
            <summary>
            Creates a deep clone of the list of points given
            </summary>
            <param name="pointList">Point list to be cloned</param>
            <returns>Deep clone of the point list</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.ShortestDistance(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the shortest distance to a point on the specified straight line segment
            from a specified point
            </summary>
            <param name="pt">Point from which the distance is calculated</param>
            <param name="pt1">One of the end points of the straight line</param>
            <param name="pt2">The other end point of the straight line</param>
            <returns>The shortest distance, not necessarily the length of the normal</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.ShortestDistance(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the shortest distance to a point on the specified straight line segment
            from a specified point
            </summary>
            <param name="pt">Point from which the distance is calculated</param>
            <param name="x1"> X of One of the end points of the straight line</param>
            <param name="y1"> Y of One of the end points of the straight line</param>
            <param name="x2"> X of the other end point of the straight line</param>
            <param name="y2"> Y of the other end point of the straight line</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.ShortestDistance(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the shortest distance to a point on the specified straight line segment
            from a specified point
            </summary>
            <param name="x"> X of the point, which the distance is calculated from this point</param>
            <param name="y">Y of the Point, which the distance is calculated from this point</param>
            <param name="x1"> X of One of the end points of the straight line</param>
            <param name="y1"> Y of One of the end points of the straight line</param>
            <param name="x2"> X of the other end point of the straight line</param>
            <param name="y2"> Y of the other end point of the straight line</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns distance between two points (x0,y0) and (x1,y1)
            </summary>
            <param name="x0">Point1 x coordinate</param>
            <param name="y0">Point1 y coordinate</param>
            <param name="x1">Point2 x coordinate</param>
            <param name="y1">Point2 y coordinate</param>
            <returns>Distance between Point1 and Point2</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.DirectionAngleTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the direction angle from the reference point to the direction point.
            </summary>
            <param name="referencePointX">X Coordinate of the reference point</param>
            <param name="referencePointY">Y Coordinate of the reference point</param>
            <param name="directionPointX">X coordinate of the direction point</param>
            <param name="directionPointY">Y coordinate of the direction point</param>
            <returns>Returns the direction angle in radians</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.DirectionAngleTo(System.Single,System.Single,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the direction angle from the reference point to the direction point.
            </summary>
            <param name="referencePointX">X Coordinate of the reference point</param>
            <param name="referencePointY">Y Coordinate of the reference point</param>
            <param name="directionPoint">Direction point</param>
            <returns>Returns the direction angle in radians</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.DistanceToProjection(Cti.Hardware.ScanDevice.Base.Point3D,System.Single,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Find the distance between the point given and the projected point of that point on the given line
            </summary>
            <param name="lineStart"></param>
            <param name="lineDirection"></param>
            <param name="pointToProject"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.ThreePointAngle(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the angle between three points. Reference point is the corner.
            Direction point defines the starting direction of angle.
            endPoint gives the ending direction of the angle
            Angle is measured starting from direction point to endPoint in anti-clockwise direction
            </summary>
            <param name="referencePoint">Corner point</param>
            <param name="directionPoint">Angle is measured starting from this direction</param>
            <param name="endPoint">Angle is measured to this endPoint direction</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.Midpoint(Cti.Hardware.ScanDevice.Base.Point3D,Cti.Hardware.ScanDevice.Base.Point3D)">
            <summary>
            Returns the GsiPointW mid point of the line specified by the two GsiPointW points 
            </summary>
            <param name="pt0">First point</param>
            <param name="pt1">Second point</param>
            <returns>Mid point of two points </returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.Midpoint(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the mid point of the line specified by the parameters
            </summary>
            <param name="x0">Point1 x coordinate</param>
            <param name="y0">Point1 y coordinate</param>
            <param name="x1">Point2 x coordinate</param>
            <param name="y1">Point2 y coordinate</param>
            <returns>Mid point of two points</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.PointUtil.TransformPoints(System.Drawing.Drawing2D.Matrix,Cti.Hardware.ScanDevice.Base.Point3D[])">
            <summary>
            Transform a point by given matrix
            </summary>
            <param name="matrix"></param>
            <param name="points"></param>
        </member>
        <member name="T:Cti.Hardware.Extension.Util.RectangleUtil">
            <summary>
            Description of RectangleUtil.
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.RectangleUtil.InsideRectangle(System.Single,System.Single,System.Single,System.Single,Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Insides the rectangle.
            </summary>
            <param name="x1">The x coordinate of start point.</param>
            <param name="y1">The y of start point.</param>
            <param name="x2">The x of end point.</param>
            <param name="y2">The y of end point.</param>
            <param name="rectangle">The rectangle to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.RectangleUtil.CrossesRectangle(System.Single,System.Single,System.Single,System.Single,Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Crosses the rectangle.
            </summary>
            <param name="x1">The x coordinate of start point.</param>
            <param name="y1">The y of start point.</param>
            <param name="x2">The x of end point.</param>
            <param name="y2">The y of end point.</param>
            <param name="rectangle">The rectangle to be checked.</param>
            <returns></returns>
        </member>
        <member name="T:Cti.Hardware.Extension.Util.ShapeUtil">
            <summary>
            Contains utility methods required to work with shapes and shape lists
            </summary>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.ArcDirection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the arc direction of a CBN arc.
            Input values should be relative to centerpoint of the arc.
            	Returns:-
            		CLOCK_WISE	= 1;
            		COUNTER_CLOCK	= 2;
            		A_CIRCLE		= 3;
            		ERROR			= -1;
            </summary>
            <param name="startX">x value of the starting point relative to centerpoint</param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <returns></returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.CreateDeepClone(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase})">
            <summary>
            Creates a deep clone of the list of shapes given
            </summary>
            <param name="shapeList">Shape list to be cloned</param>
            <returns>Deep clone of the shape list</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.Boundary(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},Cti.Hardware.Extension.Shapes.BoundingBox)">
            <summary>
            Calculates the boundary of the list of shapes given
            </summary>
            <param name="shapeList">Shape list to be used in calculation the boundary</param>
            <param name="shapeBoundary">Rectangle to be updated with the boundary coordinates</param>
            <returns>True if the value is valid, else false</returns>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.Rotate(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single)">
            <summary>
            Rotate all the shapes with the given angle. Angle should be in radians.
            </summary>
            <param name="shapeList">list of shapes to be rotate</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.Rotate(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single,System.Single,System.Single)">
            <summary>
            Rotate all the shapes with the given angle around the reference point. Angle should be in radians.
            </summary>
            <param name="shapeList">list of shapes to be rotate</param>
            <param name="angle"></param>
            <param name="refPointX">X coordinate of rotation reference point</param>
            <param name="refPointY">Y coordinate of rotation reference point</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.Move(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single,System.Single,System.Single)">
            <summary>
            Move all the shapes with the given x and y offsets.
            </summary>
            <param name="shapeList">Shape list to check</param>
            <param name="dx">Offset in X direction</param>
            <param name="dy">Offset in Y direction</param>
            <param name="dz">Offset in Z direction</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.Scale(System.Collections.Generic.IEnumerable{Cti.Hardware.Extension.Shapes.ShapeBase},System.Single)">
            <summary>
            Scale al  the shapes with the given scale factor.
            </summary>
            <param name="shapeList">list of shapes to be scale</param>
            <param name="scaleFactor">Scaling factor</param>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.SerializeStringAsBytes(System.IO.BinaryWriter,System.String)">
            <summary>
            Write string as bytes
            Write the byte representation of the specified string and derialize that byte array using the given BinaryWriter.
            </summary>
            <param name="writer"></param>
            <param name="data"></param>
        </member>
        <member name="M:Cti.Hardware.Extension.Util.ShapeUtil.DeserializeStringAsBytes(System.IO.BinaryReader)">
            <summary>
            Get the deserialized string by reading bytes
            After deserialize to the byte array using BinaryWriter gets the byte representation of the specified string.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
    </members>
</doc>
